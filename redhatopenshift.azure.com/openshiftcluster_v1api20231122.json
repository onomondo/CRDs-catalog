{
  "description": "Generator information:\n- Generated from: /redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/openshiftclusters/stable/2023-11-22/redhatopenshift.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters/{resourceName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "apiserverProfile": {
          "description": "ApiserverProfile: The cluster API server profile.",
          "properties": {
            "visibility": {
              "description": "Visibility: API server visibility.",
              "enum": [
                "Private",
                "Public"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "clusterProfile": {
          "description": "ClusterProfile: The cluster profile.",
          "properties": {
            "domain": {
              "description": "Domain: The domain for the cluster.",
              "type": "string"
            },
            "fipsValidatedModules": {
              "description": "FipsValidatedModules: If FIPS validated crypto modules are used",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            },
            "pullSecret": {
              "description": "PullSecret: The pull secret for the cluster.",
              "properties": {
                "key": {
                  "description": "Key is the key in the Kubernetes secret being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of the Kubernetes secret being referenced.\nThe secret must be in the same namespace as the resource",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "resourceGroupId": {
              "description": "ResourceGroupId: The ID of the cluster resource group.",
              "type": "string"
            },
            "version": {
              "description": "Version: The version of the cluster.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "ingressProfiles": {
          "description": "IngressProfiles: The cluster ingress profiles.",
          "items": {
            "description": "IngressProfile represents an ingress profile.",
            "properties": {
              "name": {
                "description": "Name: The ingress profile name.",
                "type": "string"
              },
              "visibility": {
                "description": "Visibility: Ingress visibility.",
                "enum": [
                  "Private",
                  "Public"
                ],
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "location": {
          "description": "Location: The geo-location where the resource lives",
          "type": "string"
        },
        "masterProfile": {
          "description": "MasterProfile: The cluster master profile.",
          "properties": {
            "diskEncryptionSetReference": {
              "description": "DiskEncryptionSetReference: The resource ID of an associated DiskEncryptionSet, if applicable.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "encryptionAtHost": {
              "description": "EncryptionAtHost: Whether master virtual machines are encrypted at host.",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            },
            "subnetReference": {
              "description": "SubnetReference: The Azure resource ID of the master subnet.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "vmSize": {
              "description": "VmSize: The size of the master VMs.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "networkProfile": {
          "description": "NetworkProfile: The cluster network profile.",
          "properties": {
            "loadBalancerProfile": {
              "description": "LoadBalancerProfile: The cluster load balancer profile.",
              "properties": {
                "managedOutboundIps": {
                  "description": "ManagedOutboundIps: The desired managed outbound IPs for the cluster public load balancer.",
                  "properties": {
                    "count": {
                      "description": "Count: Count represents the desired number of IPv4 outbound IPs created and managed by Azure for the cluster public load\nbalancer.  Allowed values are in the range of 1 - 20.  The default value is 1.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "outboundType": {
              "description": "OutboundType: The OutboundType used for egress traffic.",
              "enum": [
                "Loadbalancer",
                "UserDefinedRouting"
              ],
              "type": "string"
            },
            "podCidr": {
              "description": "PodCidr: The CIDR used for OpenShift/Kubernetes Pods.",
              "type": "string"
            },
            "preconfiguredNSG": {
              "description": "PreconfiguredNSG: Specifies whether subnets are pre-attached with an NSG",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            },
            "serviceCidr": {
              "description": "ServiceCidr: The CIDR used for OpenShift/Kubernetes Services.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secrets": {
              "description": "Secrets: configures where to place Azure generated secrets.",
              "properties": {
                "adminCredentials": {
                  "description": "AdminCredentials: indicates where the AdminCredentials secret should be placed. If omitted, the secret will not be\nretrieved from Azure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "password": {
                  "description": "Password: indicates where the Password secret should be placed. If omitted, the secret will not be retrieved from Azure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "username": {
                  "description": "Username: indicates where the Username secret should be placed. If omitted, the secret will not be retrieved from Azure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a resources.azure.com/ResourceGroup resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "servicePrincipalProfile": {
          "description": "ServicePrincipalProfile: The cluster service principal profile.",
          "properties": {
            "clientId": {
              "description": "ClientId: The client ID used for the cluster.",
              "type": "string"
            },
            "clientIdFromConfig": {
              "description": "ClientIdFromConfig: The client ID used for the cluster.",
              "properties": {
                "key": {
                  "description": "Key is the key in the Kubernetes configmap being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of the Kubernetes configmap being referenced.\nThe configmap must be in the same namespace as the resource",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "clientSecret": {
              "description": "ClientSecret: The client secret used for the cluster.",
              "properties": {
                "key": {
                  "description": "Key is the key in the Kubernetes secret being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of the Kubernetes secret being referenced.\nThe secret must be in the same namespace as the resource",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "workerProfiles": {
          "description": "WorkerProfiles: The cluster worker profiles.",
          "items": {
            "description": "WorkerProfile represents a worker profile.",
            "properties": {
              "count": {
                "description": "Count: The number of worker VMs.",
                "type": "integer"
              },
              "diskEncryptionSetReference": {
                "description": "DiskEncryptionSetReference: The resource ID of an associated DiskEncryptionSet, if applicable.",
                "properties": {
                  "armId": {
                    "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                    "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                    "type": "string"
                  },
                  "group": {
                    "description": "Group is the Kubernetes group of the resource.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is the Kubernetes kind of the resource.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the Kubernetes name of the resource.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "diskSizeGB": {
                "description": "DiskSizeGB: The disk size of the worker VMs.",
                "type": "integer"
              },
              "encryptionAtHost": {
                "description": "EncryptionAtHost: Whether master virtual machines are encrypted at host.",
                "enum": [
                  "Disabled",
                  "Enabled"
                ],
                "type": "string"
              },
              "name": {
                "description": "Name: The worker profile name.",
                "type": "string"
              },
              "subnetReference": {
                "description": "SubnetReference: The Azure resource ID of the worker subnet.",
                "properties": {
                  "armId": {
                    "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                    "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                    "type": "string"
                  },
                  "group": {
                    "description": "Group is the Kubernetes group of the resource.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is the Kubernetes kind of the resource.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the Kubernetes name of the resource.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "vmSize": {
                "description": "VmSize: The size of the worker VMs.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "required": [
        "location",
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "OpenShiftCluster represents an Azure Red Hat OpenShift cluster.",
      "properties": {
        "apiserverProfile": {
          "description": "ApiserverProfile: The cluster API server profile.",
          "properties": {
            "ip": {
              "description": "Ip: The IP of the cluster API server.",
              "type": "string"
            },
            "url": {
              "description": "Url: The URL to access the cluster API server.",
              "type": "string"
            },
            "visibility": {
              "description": "Visibility: API server visibility.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "clusterProfile": {
          "description": "ClusterProfile: The cluster profile.",
          "properties": {
            "domain": {
              "description": "Domain: The domain for the cluster.",
              "type": "string"
            },
            "fipsValidatedModules": {
              "description": "FipsValidatedModules: If FIPS validated crypto modules are used",
              "type": "string"
            },
            "resourceGroupId": {
              "description": "ResourceGroupId: The ID of the cluster resource group.",
              "type": "string"
            },
            "version": {
              "description": "Version: The version of the cluster.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "consoleProfile": {
          "description": "ConsoleProfile: The console profile.",
          "properties": {
            "url": {
              "description": "Url: The URL to access the cluster console.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "id": {
          "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "type": "string"
        },
        "ingressProfiles": {
          "description": "IngressProfiles: The cluster ingress profiles.",
          "items": {
            "description": "IngressProfile represents an ingress profile.",
            "properties": {
              "ip": {
                "description": "Ip: The IP of the ingress.",
                "type": "string"
              },
              "name": {
                "description": "Name: The ingress profile name.",
                "type": "string"
              },
              "visibility": {
                "description": "Visibility: Ingress visibility.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "location": {
          "description": "Location: The geo-location where the resource lives",
          "type": "string"
        },
        "masterProfile": {
          "description": "MasterProfile: The cluster master profile.",
          "properties": {
            "diskEncryptionSetId": {
              "description": "DiskEncryptionSetId: The resource ID of an associated DiskEncryptionSet, if applicable.",
              "type": "string"
            },
            "encryptionAtHost": {
              "description": "EncryptionAtHost: Whether master virtual machines are encrypted at host.",
              "type": "string"
            },
            "subnetId": {
              "description": "SubnetId: The Azure resource ID of the master subnet.",
              "type": "string"
            },
            "vmSize": {
              "description": "VmSize: The size of the master VMs.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        },
        "networkProfile": {
          "description": "NetworkProfile: The cluster network profile.",
          "properties": {
            "loadBalancerProfile": {
              "description": "LoadBalancerProfile: The cluster load balancer profile.",
              "properties": {
                "effectiveOutboundIps": {
                  "description": "EffectiveOutboundIps: The list of effective outbound IP addresses of the public load balancer.",
                  "items": {
                    "description": "EffectiveOutboundIP represents an effective outbound IP resource of the cluster public load balancer.",
                    "properties": {
                      "id": {
                        "description": "Id: The fully qualified Azure resource id of an IP address resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "managedOutboundIps": {
                  "description": "ManagedOutboundIps: The desired managed outbound IPs for the cluster public load balancer.",
                  "properties": {
                    "count": {
                      "description": "Count: Count represents the desired number of IPv4 outbound IPs created and managed by Azure for the cluster public load\nbalancer.  Allowed values are in the range of 1 - 20.  The default value is 1.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "outboundType": {
              "description": "OutboundType: The OutboundType used for egress traffic.",
              "type": "string"
            },
            "podCidr": {
              "description": "PodCidr: The CIDR used for OpenShift/Kubernetes Pods.",
              "type": "string"
            },
            "preconfiguredNSG": {
              "description": "PreconfiguredNSG: Specifies whether subnets are pre-attached with an NSG",
              "type": "string"
            },
            "serviceCidr": {
              "description": "ServiceCidr: The CIDR used for OpenShift/Kubernetes Services.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "provisioningState": {
          "description": "ProvisioningState: The cluster provisioning state.",
          "type": "string"
        },
        "servicePrincipalProfile": {
          "description": "ServicePrincipalProfile: The cluster service principal profile.",
          "properties": {
            "clientId": {
              "description": "ClientId: The client ID used for the cluster.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "systemData": {
          "description": "SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "properties": {
            "createdAt": {
              "description": "CreatedAt: The timestamp of resource creation (UTC).",
              "type": "string"
            },
            "createdBy": {
              "description": "CreatedBy: The identity that created the resource.",
              "type": "string"
            },
            "createdByType": {
              "description": "CreatedByType: The type of identity that created the resource.",
              "type": "string"
            },
            "lastModifiedAt": {
              "description": "LastModifiedAt: The timestamp of resource last modification (UTC)",
              "type": "string"
            },
            "lastModifiedBy": {
              "description": "LastModifiedBy: The identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedByType": {
              "description": "LastModifiedByType: The type of identity that last modified the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "type": {
          "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "type": "string"
        },
        "workerProfiles": {
          "description": "WorkerProfiles: The cluster worker profiles.",
          "items": {
            "description": "WorkerProfile represents a worker profile.",
            "properties": {
              "count": {
                "description": "Count: The number of worker VMs.",
                "type": "integer"
              },
              "diskEncryptionSetId": {
                "description": "DiskEncryptionSetId: The resource ID of an associated DiskEncryptionSet, if applicable.",
                "type": "string"
              },
              "diskSizeGB": {
                "description": "DiskSizeGB: The disk size of the worker VMs.",
                "type": "integer"
              },
              "encryptionAtHost": {
                "description": "EncryptionAtHost: Whether master virtual machines are encrypted at host.",
                "type": "string"
              },
              "name": {
                "description": "Name: The worker profile name.",
                "type": "string"
              },
              "subnetId": {
                "description": "SubnetId: The Azure resource ID of the worker subnet.",
                "type": "string"
              },
              "vmSize": {
                "description": "VmSize: The size of the worker VMs.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "workerProfilesStatus": {
          "description": "WorkerProfilesStatus: The cluster worker profiles status.",
          "items": {
            "description": "WorkerProfile represents a worker profile.",
            "properties": {
              "count": {
                "description": "Count: The number of worker VMs.",
                "type": "integer"
              },
              "diskEncryptionSetId": {
                "description": "DiskEncryptionSetId: The resource ID of an associated DiskEncryptionSet, if applicable.",
                "type": "string"
              },
              "diskSizeGB": {
                "description": "DiskSizeGB: The disk size of the worker VMs.",
                "type": "integer"
              },
              "encryptionAtHost": {
                "description": "EncryptionAtHost: Whether master virtual machines are encrypted at host.",
                "type": "string"
              },
              "name": {
                "description": "Name: The worker profile name.",
                "type": "string"
              },
              "subnetId": {
                "description": "SubnetId: The Azure resource ID of the worker subnet.",
                "type": "string"
              },
              "vmSize": {
                "description": "VmSize: The size of the worker VMs.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
