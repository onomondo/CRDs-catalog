{
  "description": "DockerClusterTemplate is the Schema for the dockerclustertemplates API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "DockerClusterTemplateSpec defines the desired state of DockerClusterTemplate.",
      "properties": {
        "template": {
          "description": "DockerClusterTemplateResource describes the data needed to create a DockerCluster from a template.",
          "properties": {
            "metadata": {
              "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "labels is a map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "spec": {
              "description": "DockerClusterSpec defines the desired state of DockerCluster.",
              "properties": {
                "controlPlaneEndpoint": {
                  "description": "ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.",
                  "properties": {
                    "host": {
                      "description": "Host is the hostname on which the API server is serving.",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port is the port on which the API server is serving.\nDefaults to 6443 if not set.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "host",
                    "port"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "failureDomains": {
                  "additionalProperties": {
                    "description": "FailureDomainSpec is the Schema for Cluster API failure domains.\nIt allows controllers to understand how many failure domains a cluster can optionally span across.",
                    "properties": {
                      "attributes": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "attributes is a free form map of attributes an infrastructure provider might use or require.",
                        "type": "object"
                      },
                      "controlPlane": {
                        "description": "controlPlane determines if this failure domain is suitable for use by control plane machines.",
                        "type": "boolean"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "description": "FailureDomains are usually not defined in the spec.\nThe docker provider is special since failure domains don't mean anything in a local docker environment.\nInstead, the docker cluster controller will simply copy these into the Status and allow the Cluster API\ncontrollers to do what they will with the defined failure domains.",
                  "type": "object"
                },
                "loadBalancer": {
                  "description": "LoadBalancer allows defining configurations for the cluster load balancer.",
                  "properties": {
                    "customHAProxyConfigTemplateRef": {
                      "description": "CustomHAProxyConfigTemplateRef allows you to replace the default HAProxy config file.\nThis field is a reference to a config map that contains the configuration template. The key of the config map should be equal to 'value'.\nThe content of the config map will be processed and will replace the default HAProxy config file. Please use it with caution, as there are\nno checks to ensure the validity of the configuration. This template will support the following variables that will be passed by the controller:\n$IPv6 (bool) indicates if the cluster is IPv6, $FrontendControlPlanePort (string) indicates the frontend control plane port,\n$BackendControlPlanePort (string) indicates the backend control plane port, $BackendServers (map[string]string) indicates the backend server\nwhere the key is the server name and the value is the address. This map is dynamic and is updated every time a new control plane\nnode is added or removed. The template will also support the JoinHostPort function to join the host and port of the backend server.",
                      "properties": {
                        "name": {
                          "default": "",
                          "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "x-kubernetes-map-type": "atomic",
                      "additionalProperties": false
                    },
                    "imageRepository": {
                      "description": "ImageRepository sets the container registry to pull the haproxy image from.\nif not set, \"kindest\" will be used instead.",
                      "type": "string"
                    },
                    "imageTag": {
                      "description": "ImageTag allows to specify a tag for the haproxy image.\nif not set, \"v20210715-a6da3463\" will be used instead.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "spec"
          ],
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "template"
      ],
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
