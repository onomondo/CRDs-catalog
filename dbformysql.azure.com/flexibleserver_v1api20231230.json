{
  "description": "Generator information:\n- Generated from: /mysql/resource-manager/Microsoft.DBforMySQL/FlexibleServers/stable/2023-12-30/FlexibleServers.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/flexibleServers/{serverName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "administratorLogin": {
          "description": "AdministratorLogin: The administrator's login name of a server. Can only be specified when the server is being created\n(and is required for creation).",
          "type": "string"
        },
        "administratorLoginPassword": {
          "description": "AdministratorLoginPassword: The password of the administrator login (required for server creation).",
          "properties": {
            "key": {
              "description": "Key is the key in the Kubernetes secret being referenced",
              "type": "string"
            },
            "name": {
              "description": "Name is the name of the Kubernetes secret being referenced.\nThe secret must be in the same namespace as the resource",
              "type": "string"
            }
          },
          "required": [
            "key",
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "availabilityZone": {
          "description": "AvailabilityZone: availability Zone information of the server.",
          "type": "string"
        },
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "backup": {
          "description": "Backup: Backup related properties of a server.",
          "properties": {
            "backupIntervalHours": {
              "description": "BackupIntervalHours: Backup interval hours for the server.",
              "type": "integer"
            },
            "backupRetentionDays": {
              "description": "BackupRetentionDays: Backup retention days for the server.",
              "type": "integer"
            },
            "geoRedundantBackup": {
              "description": "GeoRedundantBackup: Whether or not geo redundant backup is enabled.",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "createMode": {
          "description": "CreateMode: The mode to create a new MySQL server.",
          "enum": [
            "Default",
            "GeoRestore",
            "PointInTimeRestore",
            "Replica"
          ],
          "type": "string"
        },
        "dataEncryption": {
          "description": "DataEncryption: The Data Encryption for CMK.",
          "properties": {
            "geoBackupKeyURI": {
              "description": "GeoBackupKeyURI: Geo backup key uri as key vault can't cross region, need cmk in same region as geo backup",
              "type": "string"
            },
            "geoBackupUserAssignedIdentityReference": {
              "description": "GeoBackupUserAssignedIdentityReference: Geo backup user identity resource id as identity can't cross region, need\nidentity in same region as geo backup",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "primaryKeyURI": {
              "description": "PrimaryKeyURI: Primary key uri",
              "type": "string"
            },
            "primaryUserAssignedIdentityReference": {
              "description": "PrimaryUserAssignedIdentityReference: Primary user identity resource id",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "type": {
              "description": "Type: The key type, AzureKeyVault for enable cmk, SystemManaged for disable cmk.",
              "enum": [
                "AzureKeyVault",
                "SystemManaged"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "highAvailability": {
          "description": "HighAvailability: High availability related properties of a server.",
          "properties": {
            "mode": {
              "description": "Mode: High availability mode for a server.",
              "enum": [
                "Disabled",
                "SameZone",
                "ZoneRedundant"
              ],
              "type": "string"
            },
            "standbyAvailabilityZone": {
              "description": "StandbyAvailabilityZone: Availability zone of the standby server.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "identity": {
          "description": "Identity: The cmk identity for the server.",
          "properties": {
            "type": {
              "description": "Type: Type of managed service identity.",
              "enum": [
                "UserAssigned"
              ],
              "type": "string"
            },
            "userAssignedIdentities": {
              "description": "UserAssignedIdentities: Metadata of user assigned identity.",
              "items": {
                "description": "Information about the user assigned identity for the resource",
                "properties": {
                  "reference": {
                    "description": "ResourceReference represents a resource reference, either to a Kubernetes resource or directly to an Azure resource via ARMID",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "importSourceProperties": {
          "description": "ImportSourceProperties: Source properties for import from storage.",
          "properties": {
            "dataDirPath": {
              "description": "DataDirPath: Relative path of data directory in storage.",
              "type": "string"
            },
            "sasToken": {
              "description": "SasToken: Sas token for accessing source storage. Read and list permissions are required for sas token.",
              "properties": {
                "key": {
                  "description": "Key is the key in the Kubernetes secret being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of the Kubernetes secret being referenced.\nThe secret must be in the same namespace as the resource",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "storageType": {
              "description": "StorageType: Storage type of import source.",
              "enum": [
                "AzureBlob"
              ],
              "type": "string"
            },
            "storageUrl": {
              "description": "StorageUrl: Uri of the import source storage.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "location": {
          "description": "Location: The geo-location where the resource lives",
          "type": "string"
        },
        "maintenanceWindow": {
          "description": "MaintenanceWindow: Maintenance window of a server.",
          "properties": {
            "customWindow": {
              "description": "CustomWindow: indicates whether custom window is enabled or disabled",
              "type": "string"
            },
            "dayOfWeek": {
              "description": "DayOfWeek: day of week for maintenance window",
              "type": "integer"
            },
            "startHour": {
              "description": "StartHour: start hour for maintenance window",
              "type": "integer"
            },
            "startMinute": {
              "description": "StartMinute: start minute for maintenance window",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "network": {
          "description": "Network: Network related properties of a server.",
          "properties": {
            "delegatedSubnetResourceReference": {
              "description": "DelegatedSubnetResourceReference: Delegated subnet resource id used to setup vnet for a server.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "privateDnsZoneResourceReference": {
              "description": "PrivateDnsZoneResourceReference: Private DNS zone resource id.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "publicNetworkAccess": {
              "description": "PublicNetworkAccess: Whether or not public network access is allowed for this server. Value is 'Disabled' when server\nhas VNet integration.",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "configMaps": {
              "description": "ConfigMaps: configures where to place operator written ConfigMaps.",
              "properties": {
                "administratorLogin": {
                  "description": "AdministratorLogin: indicates where the AdministratorLogin config map should be placed. If omitted, no config map will\nbe created.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the ConfigMap being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes ConfigMap to write to.\nThe ConfigMap will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "fullyQualifiedDomainName": {
                  "description": "FullyQualifiedDomainName: indicates where the FullyQualifiedDomainName config map should be placed. If omitted, no\nconfig map will be created.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the ConfigMap being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes ConfigMap to write to.\nThe ConfigMap will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secrets": {
              "description": "Secrets: configures where to place Azure generated secrets.",
              "properties": {
                "fullyQualifiedDomainName": {
                  "description": "FullyQualifiedDomainName: indicates where the FullyQualifiedDomainName secret should be placed. If omitted, the secret\nwill not be retrieved from Azure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a resources.azure.com/ResourceGroup resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "replicationRole": {
          "description": "ReplicationRole: The replication role.",
          "enum": [
            "None",
            "Replica",
            "Source"
          ],
          "type": "string"
        },
        "restorePointInTime": {
          "description": "RestorePointInTime: Restore point creation time (ISO8601 format), specifying the time to restore from.",
          "type": "string"
        },
        "sku": {
          "description": "Sku: The SKU (pricing tier) of the server.",
          "properties": {
            "name": {
              "description": "Name: The name of the sku, e.g. Standard_D32s_v3.",
              "type": "string"
            },
            "tier": {
              "description": "Tier: The tier of the particular SKU, e.g. GeneralPurpose.",
              "enum": [
                "Burstable",
                "GeneralPurpose",
                "MemoryOptimized"
              ],
              "type": "string"
            }
          },
          "required": [
            "name",
            "tier"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "sourceServerResourceReference": {
          "description": "SourceServerResourceReference: The source MySQL server id.",
          "properties": {
            "armId": {
              "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "group": {
              "description": "Group is the Kubernetes group of the resource.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the Kubernetes kind of the resource.",
              "type": "string"
            },
            "name": {
              "description": "Name is the Kubernetes name of the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "storage": {
          "description": "Storage: Storage related properties of a server.",
          "properties": {
            "autoGrow": {
              "description": "AutoGrow: Enable Storage Auto Grow or not.",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            },
            "autoIoScaling": {
              "description": "AutoIoScaling: Enable IO Auto Scaling or not.",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            },
            "iops": {
              "description": "Iops: Storage IOPS for a server.",
              "type": "integer"
            },
            "logOnDisk": {
              "description": "LogOnDisk: Enable Log On Disk or not.",
              "enum": [
                "Disabled",
                "Enabled"
              ],
              "type": "string"
            },
            "storageSizeGB": {
              "description": "StorageSizeGB: Max storage size allowed for a server.",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "version": {
          "description": "Version: Server version.",
          "enum": [
            "5.7",
            "8.0.21"
          ],
          "type": "string"
        }
      },
      "required": [
        "location",
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "administratorLogin": {
          "description": "AdministratorLogin: The administrator's login name of a server. Can only be specified when the server is being created\n(and is required for creation).",
          "type": "string"
        },
        "availabilityZone": {
          "description": "AvailabilityZone: availability Zone information of the server.",
          "type": "string"
        },
        "backup": {
          "description": "Backup: Backup related properties of a server.",
          "properties": {
            "backupIntervalHours": {
              "description": "BackupIntervalHours: Backup interval hours for the server.",
              "type": "integer"
            },
            "backupRetentionDays": {
              "description": "BackupRetentionDays: Backup retention days for the server.",
              "type": "integer"
            },
            "earliestRestoreDate": {
              "description": "EarliestRestoreDate: Earliest restore point creation time (ISO8601 format)",
              "type": "string"
            },
            "geoRedundantBackup": {
              "description": "GeoRedundantBackup: Whether or not geo redundant backup is enabled.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "createMode": {
          "description": "CreateMode: The mode to create a new MySQL server.",
          "type": "string"
        },
        "dataEncryption": {
          "description": "DataEncryption: The Data Encryption for CMK.",
          "properties": {
            "geoBackupKeyURI": {
              "description": "GeoBackupKeyURI: Geo backup key uri as key vault can't cross region, need cmk in same region as geo backup",
              "type": "string"
            },
            "geoBackupUserAssignedIdentityId": {
              "description": "GeoBackupUserAssignedIdentityId: Geo backup user identity resource id as identity can't cross region, need identity in\nsame region as geo backup",
              "type": "string"
            },
            "primaryKeyURI": {
              "description": "PrimaryKeyURI: Primary key uri",
              "type": "string"
            },
            "primaryUserAssignedIdentityId": {
              "description": "PrimaryUserAssignedIdentityId: Primary user identity resource id",
              "type": "string"
            },
            "type": {
              "description": "Type: The key type, AzureKeyVault for enable cmk, SystemManaged for disable cmk.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "fullyQualifiedDomainName": {
          "description": "FullyQualifiedDomainName: The fully qualified domain name of a server.",
          "type": "string"
        },
        "highAvailability": {
          "description": "HighAvailability: High availability related properties of a server.",
          "properties": {
            "mode": {
              "description": "Mode: High availability mode for a server.",
              "type": "string"
            },
            "standbyAvailabilityZone": {
              "description": "StandbyAvailabilityZone: Availability zone of the standby server.",
              "type": "string"
            },
            "state": {
              "description": "State: The state of server high availability.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "id": {
          "description": "Id: Fully qualified resource ID for the resource. E.g.\n\"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "type": "string"
        },
        "identity": {
          "description": "Identity: The cmk identity for the server.",
          "properties": {
            "principalId": {
              "description": "PrincipalId: ObjectId from the KeyVault",
              "type": "string"
            },
            "tenantId": {
              "description": "TenantId: TenantId from the KeyVault",
              "type": "string"
            },
            "type": {
              "description": "Type: Type of managed service identity.",
              "type": "string"
            },
            "userAssignedIdentities": {
              "additionalProperties": {
                "x-kubernetes-preserve-unknown-fields": true
              },
              "description": "UserAssignedIdentities: Metadata of user assigned identity.",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "importSourceProperties": {
          "description": "ImportSourceProperties: Source properties for import from storage.",
          "properties": {
            "dataDirPath": {
              "description": "DataDirPath: Relative path of data directory in storage.",
              "type": "string"
            },
            "storageType": {
              "description": "StorageType: Storage type of import source.",
              "type": "string"
            },
            "storageUrl": {
              "description": "StorageUrl: Uri of the import source storage.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "location": {
          "description": "Location: The geo-location where the resource lives",
          "type": "string"
        },
        "maintenanceWindow": {
          "description": "MaintenanceWindow: Maintenance window of a server.",
          "properties": {
            "customWindow": {
              "description": "CustomWindow: indicates whether custom window is enabled or disabled",
              "type": "string"
            },
            "dayOfWeek": {
              "description": "DayOfWeek: day of week for maintenance window",
              "type": "integer"
            },
            "startHour": {
              "description": "StartHour: start hour for maintenance window",
              "type": "integer"
            },
            "startMinute": {
              "description": "StartMinute: start minute for maintenance window",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        },
        "network": {
          "description": "Network: Network related properties of a server.",
          "properties": {
            "delegatedSubnetResourceId": {
              "description": "DelegatedSubnetResourceId: Delegated subnet resource id used to setup vnet for a server.",
              "type": "string"
            },
            "privateDnsZoneResourceId": {
              "description": "PrivateDnsZoneResourceId: Private DNS zone resource id.",
              "type": "string"
            },
            "publicNetworkAccess": {
              "description": "PublicNetworkAccess: Whether or not public network access is allowed for this server. Value is 'Disabled' when server\nhas VNet integration.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "privateEndpointConnections": {
          "description": "PrivateEndpointConnections: PrivateEndpointConnections related properties of a server.",
          "items": {
            "description": "The private endpoint connection resource.",
            "properties": {
              "id": {
                "description": "Id: Fully qualified resource ID for the resource. E.g.\n\"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "replicaCapacity": {
          "description": "ReplicaCapacity: The maximum number of replicas that a primary server can have.",
          "type": "integer"
        },
        "replicationRole": {
          "description": "ReplicationRole: The replication role.",
          "type": "string"
        },
        "restorePointInTime": {
          "description": "RestorePointInTime: Restore point creation time (ISO8601 format), specifying the time to restore from.",
          "type": "string"
        },
        "sku": {
          "description": "Sku: The SKU (pricing tier) of the server.",
          "properties": {
            "name": {
              "description": "Name: The name of the sku, e.g. Standard_D32s_v3.",
              "type": "string"
            },
            "tier": {
              "description": "Tier: The tier of the particular SKU, e.g. GeneralPurpose.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "sourceServerResourceId": {
          "description": "SourceServerResourceId: The source MySQL server id.",
          "type": "string"
        },
        "state": {
          "description": "State: The state of a server.",
          "type": "string"
        },
        "storage": {
          "description": "Storage: Storage related properties of a server.",
          "properties": {
            "autoGrow": {
              "description": "AutoGrow: Enable Storage Auto Grow or not.",
              "type": "string"
            },
            "autoIoScaling": {
              "description": "AutoIoScaling: Enable IO Auto Scaling or not.",
              "type": "string"
            },
            "iops": {
              "description": "Iops: Storage IOPS for a server.",
              "type": "integer"
            },
            "logOnDisk": {
              "description": "LogOnDisk: Enable Log On Disk or not.",
              "type": "string"
            },
            "storageSizeGB": {
              "description": "StorageSizeGB: Max storage size allowed for a server.",
              "type": "integer"
            },
            "storageSku": {
              "description": "StorageSku: The sku name of the server storage.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "systemData": {
          "description": "SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "properties": {
            "createdAt": {
              "description": "CreatedAt: The timestamp of resource creation (UTC).",
              "type": "string"
            },
            "createdBy": {
              "description": "CreatedBy: The identity that created the resource.",
              "type": "string"
            },
            "createdByType": {
              "description": "CreatedByType: The type of identity that created the resource.",
              "type": "string"
            },
            "lastModifiedAt": {
              "description": "LastModifiedAt: The timestamp of resource last modification (UTC)",
              "type": "string"
            },
            "lastModifiedBy": {
              "description": "LastModifiedBy: The identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedByType": {
              "description": "LastModifiedByType: The type of identity that last modified the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "type": {
          "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "type": "string"
        },
        "version": {
          "description": "Version: Server version.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
