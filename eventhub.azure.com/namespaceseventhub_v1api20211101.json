{
  "description": "Generator information:\n- Generated from: /eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/eventhubs.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "maxLength": 256,
          "minLength": 1,
          "type": "string"
        },
        "captureDescription": {
          "description": "CaptureDescription: Properties of capture description",
          "properties": {
            "destination": {
              "description": "Destination: Properties of Destination where capture will be stored. (Storage Account, Blob Names)",
              "properties": {
                "archiveNameFormat": {
                  "description": "ArchiveNameFormat: Blob naming convention for archive, e.g.\n{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters\n(Namespace,EventHub .. etc) are mandatory irrespective of order",
                  "type": "string"
                },
                "blobContainer": {
                  "description": "BlobContainer: Blob container Name",
                  "type": "string"
                },
                "dataLakeAccountName": {
                  "description": "DataLakeAccountName: The Azure Data Lake Store name for the captured events",
                  "type": "string"
                },
                "dataLakeFolderPath": {
                  "description": "DataLakeFolderPath: The destination folder path for the captured events",
                  "type": "string"
                },
                "dataLakeSubscriptionId": {
                  "description": "DataLakeSubscriptionId: Subscription Id of Azure Data Lake Store",
                  "pattern": "^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$",
                  "type": "string"
                },
                "name": {
                  "description": "Name: Name for capture destination",
                  "type": "string"
                },
                "storageAccountResourceReference": {
                  "description": "StorageAccountResourceReference: Resource id of the storage account to be used to create the blobs",
                  "properties": {
                    "armId": {
                      "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                      "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                      "type": "string"
                    },
                    "group": {
                      "description": "Group is the Kubernetes group of the resource.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is the Kubernetes kind of the resource.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the Kubernetes name of the resource.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "enabled": {
              "description": "Enabled: A value that indicates whether capture description is enabled.",
              "type": "boolean"
            },
            "encoding": {
              "description": "Encoding: Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be\ndeprecated in New API Version",
              "enum": [
                "Avro",
                "AvroDeflate"
              ],
              "type": "string"
            },
            "intervalInSeconds": {
              "description": "IntervalInSeconds: The time window allows you to set the frequency with which the capture to Azure Blobs will happen,\nvalue should between 60 to 900 seconds",
              "type": "integer"
            },
            "sizeLimitInBytes": {
              "description": "SizeLimitInBytes: The size window defines the amount of data built up in your Event Hub before an capture operation,\nvalue should be between 10485760 to 524288000 bytes",
              "type": "integer"
            },
            "skipEmptyArchives": {
              "description": "SkipEmptyArchives: A value that indicates whether to Skip Empty Archives",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "messageRetentionInDays": {
          "description": "MessageRetentionInDays: Number of days to retain the events for this Event Hub, value should be 1 to 7 days",
          "minimum": 1,
          "type": "integer"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a eventhub.azure.com/Namespace resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "partitionCount": {
          "description": "PartitionCount: Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.",
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "captureDescription": {
          "description": "CaptureDescription: Properties of capture description",
          "properties": {
            "destination": {
              "description": "Destination: Properties of Destination where capture will be stored. (Storage Account, Blob Names)",
              "properties": {
                "archiveNameFormat": {
                  "description": "ArchiveNameFormat: Blob naming convention for archive, e.g.\n{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters\n(Namespace,EventHub .. etc) are mandatory irrespective of order",
                  "type": "string"
                },
                "blobContainer": {
                  "description": "BlobContainer: Blob container Name",
                  "type": "string"
                },
                "dataLakeAccountName": {
                  "description": "DataLakeAccountName: The Azure Data Lake Store name for the captured events",
                  "type": "string"
                },
                "dataLakeFolderPath": {
                  "description": "DataLakeFolderPath: The destination folder path for the captured events",
                  "type": "string"
                },
                "dataLakeSubscriptionId": {
                  "description": "DataLakeSubscriptionId: Subscription Id of Azure Data Lake Store",
                  "type": "string"
                },
                "name": {
                  "description": "Name: Name for capture destination",
                  "type": "string"
                },
                "storageAccountResourceId": {
                  "description": "StorageAccountResourceId: Resource id of the storage account to be used to create the blobs",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "enabled": {
              "description": "Enabled: A value that indicates whether capture description is enabled.",
              "type": "boolean"
            },
            "encoding": {
              "description": "Encoding: Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be\ndeprecated in New API Version",
              "type": "string"
            },
            "intervalInSeconds": {
              "description": "IntervalInSeconds: The time window allows you to set the frequency with which the capture to Azure Blobs will happen,\nvalue should between 60 to 900 seconds",
              "type": "integer"
            },
            "sizeLimitInBytes": {
              "description": "SizeLimitInBytes: The size window defines the amount of data built up in your Event Hub before an capture operation,\nvalue should be between 10485760 to 524288000 bytes",
              "type": "integer"
            },
            "skipEmptyArchives": {
              "description": "SkipEmptyArchives: A value that indicates whether to Skip Empty Archives",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "createdAt": {
          "description": "CreatedAt: Exact time the Event Hub was created.",
          "type": "string"
        },
        "id": {
          "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "type": "string"
        },
        "location": {
          "description": "Location: The geo-location where the resource lives",
          "type": "string"
        },
        "messageRetentionInDays": {
          "description": "MessageRetentionInDays: Number of days to retain the events for this Event Hub, value should be 1 to 7 days",
          "type": "integer"
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        },
        "partitionCount": {
          "description": "PartitionCount: Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.",
          "type": "integer"
        },
        "partitionIds": {
          "description": "PartitionIds: Current number of shards on the Event Hub.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "description": "Status: Enumerates the possible values for the status of the Event Hub.",
          "type": "string"
        },
        "systemData": {
          "description": "SystemData: The system meta data relating to this resource.",
          "properties": {
            "createdAt": {
              "description": "CreatedAt: The timestamp of resource creation (UTC).",
              "type": "string"
            },
            "createdBy": {
              "description": "CreatedBy: The identity that created the resource.",
              "type": "string"
            },
            "createdByType": {
              "description": "CreatedByType: The type of identity that created the resource.",
              "type": "string"
            },
            "lastModifiedAt": {
              "description": "LastModifiedAt: The type of identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedBy": {
              "description": "LastModifiedBy: The identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedByType": {
              "description": "LastModifiedByType: The type of identity that last modified the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "type": {
          "description": "Type: The type of the resource. E.g. \"Microsoft.EventHub/Namespaces\" or \"Microsoft.EventHub/Namespaces/EventHubs\"",
          "type": "string"
        },
        "updatedAt": {
          "description": "UpdatedAt: The exact time the message was updated.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
