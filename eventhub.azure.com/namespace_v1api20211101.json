{
  "description": "Generator information:\n- Generated from: /eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/namespaces-preview.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "alternateName": {
          "description": "AlternateName: Alternate name specified when alias and namespace names are same.",
          "type": "string"
        },
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "maxLength": 50,
          "minLength": 6,
          "pattern": "^[a-zA-Z][a-zA-Z0-9-]{6,50}[a-zA-Z0-9]$",
          "type": "string"
        },
        "clusterArmReference": {
          "description": "ClusterArmReference: Cluster ARM ID of the Namespace.",
          "properties": {
            "armId": {
              "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "group": {
              "description": "Group is the Kubernetes group of the resource.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the Kubernetes kind of the resource.",
              "type": "string"
            },
            "name": {
              "description": "Name is the Kubernetes name of the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "disableLocalAuth": {
          "description": "DisableLocalAuth: This property disables SAS authentication for the Event Hubs namespace.",
          "type": "boolean"
        },
        "encryption": {
          "description": "Encryption: Properties of BYOK Encryption description",
          "properties": {
            "keySource": {
              "description": "KeySource: Enumerates the possible value of keySource for Encryption",
              "enum": [
                "Microsoft.KeyVault"
              ],
              "type": "string"
            },
            "keyVaultProperties": {
              "description": "KeyVaultProperties: Properties of KeyVault",
              "items": {
                "description": "Properties to configure keyVault Properties",
                "properties": {
                  "identity": {
                    "properties": {
                      "userAssignedIdentityReference": {
                        "description": "UserAssignedIdentityReference: ARM ID of user Identity selected for encryption",
                        "properties": {
                          "armId": {
                            "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                            "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                            "type": "string"
                          },
                          "group": {
                            "description": "Group is the Kubernetes group of the resource.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the Kubernetes kind of the resource.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the Kubernetes name of the resource.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "keyName": {
                    "description": "KeyName: Name of the Key from KeyVault",
                    "type": "string"
                  },
                  "keyVaultUri": {
                    "description": "KeyVaultUri: Uri of KeyVault",
                    "type": "string"
                  },
                  "keyVersion": {
                    "description": "KeyVersion: Key Version",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "requireInfrastructureEncryption": {
              "description": "RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double Encryption)",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "identity": {
          "description": "Identity: Properties of BYOK Identity description",
          "properties": {
            "type": {
              "description": "Type: Type of managed service identity.",
              "enum": [
                "None",
                "SystemAssigned",
                "SystemAssigned, UserAssigned",
                "UserAssigned"
              ],
              "type": "string"
            },
            "userAssignedIdentities": {
              "description": "UserAssignedIdentities: Properties for User Assigned Identities",
              "items": {
                "description": "Information about the user assigned identity for the resource",
                "properties": {
                  "reference": {
                    "description": "ResourceReference represents a resource reference, either to a Kubernetes resource or directly to an Azure resource via ARMID",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "isAutoInflateEnabled": {
          "description": "IsAutoInflateEnabled: Value that indicates whether AutoInflate is enabled for eventhub namespace.",
          "type": "boolean"
        },
        "kafkaEnabled": {
          "description": "KafkaEnabled: Value that indicates whether Kafka is enabled for eventhub namespace.",
          "type": "boolean"
        },
        "location": {
          "description": "Location: Resource location.",
          "type": "string"
        },
        "maximumThroughputUnits": {
          "description": "MaximumThroughputUnits: Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20\nthroughput units. ( '0' if AutoInflateEnabled = true)",
          "type": "integer"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secrets": {
              "description": "Secrets: configures where to place Azure generated secrets.",
              "properties": {
                "primaryConnectionString": {
                  "description": "PrimaryConnectionString: indicates where the PrimaryConnectionString secret should be placed. If omitted, the secret\nwill not be retrieved from Azure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "primaryKey": {
                  "description": "PrimaryKey: indicates where the PrimaryKey secret should be placed. If omitted, the secret will not be retrieved from\nAzure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "secondaryConnectionString": {
                  "description": "SecondaryConnectionString: indicates where the SecondaryConnectionString secret should be placed. If omitted, the secret\nwill not be retrieved from Azure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "secondaryKey": {
                  "description": "SecondaryKey: indicates where the SecondaryKey secret should be placed. If omitted, the secret will not be retrieved\nfrom Azure.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the Kubernetes secret being referenced.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes secret to write to.\nThe secret will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a resources.azure.com/ResourceGroup resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "sku": {
          "description": "Sku: Properties of sku resource",
          "properties": {
            "capacity": {
              "description": "Capacity: The Event Hubs throughput units for Basic or Standard tiers, where value should be 0 to 20 throughput units.\nThe Event Hubs premium units for Premium tier, where value should be 0 to 10 premium units.",
              "minimum": 0,
              "type": "integer"
            },
            "name": {
              "description": "Name: Name of this SKU.",
              "enum": [
                "Basic",
                "Premium",
                "Standard"
              ],
              "type": "string"
            },
            "tier": {
              "description": "Tier: The billing tier of this particular SKU.",
              "enum": [
                "Basic",
                "Premium",
                "Standard"
              ],
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "zoneRedundant": {
          "description": "ZoneRedundant: Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones.",
          "type": "boolean"
        }
      },
      "required": [
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "alternateName": {
          "description": "AlternateName: Alternate name specified when alias and namespace names are same.",
          "type": "string"
        },
        "clusterArmId": {
          "description": "ClusterArmId: Cluster ARM ID of the Namespace.",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "createdAt": {
          "description": "CreatedAt: The time the Namespace was created.",
          "type": "string"
        },
        "disableLocalAuth": {
          "description": "DisableLocalAuth: This property disables SAS authentication for the Event Hubs namespace.",
          "type": "boolean"
        },
        "encryption": {
          "description": "Encryption: Properties of BYOK Encryption description",
          "properties": {
            "keySource": {
              "description": "KeySource: Enumerates the possible value of keySource for Encryption",
              "type": "string"
            },
            "keyVaultProperties": {
              "description": "KeyVaultProperties: Properties of KeyVault",
              "items": {
                "description": "Properties to configure keyVault Properties",
                "properties": {
                  "identity": {
                    "properties": {
                      "userAssignedIdentity": {
                        "description": "UserAssignedIdentity: ARM ID of user Identity selected for encryption",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "keyName": {
                    "description": "KeyName: Name of the Key from KeyVault",
                    "type": "string"
                  },
                  "keyVaultUri": {
                    "description": "KeyVaultUri: Uri of KeyVault",
                    "type": "string"
                  },
                  "keyVersion": {
                    "description": "KeyVersion: Key Version",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "requireInfrastructureEncryption": {
              "description": "RequireInfrastructureEncryption: Enable Infrastructure Encryption (Double Encryption)",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "id": {
          "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "type": "string"
        },
        "identity": {
          "description": "Identity: Properties of BYOK Identity description",
          "properties": {
            "principalId": {
              "description": "PrincipalId: ObjectId from the KeyVault",
              "type": "string"
            },
            "tenantId": {
              "description": "TenantId: TenantId from the KeyVault",
              "type": "string"
            },
            "type": {
              "description": "Type: Type of managed service identity.",
              "type": "string"
            },
            "userAssignedIdentities": {
              "additionalProperties": {
                "description": "Recognized Dictionary value.",
                "properties": {
                  "clientId": {
                    "description": "ClientId: Client Id of user assigned identity",
                    "type": "string"
                  },
                  "principalId": {
                    "description": "PrincipalId: Principal Id of user assigned identity",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "description": "UserAssignedIdentities: Properties for User Assigned Identities",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "isAutoInflateEnabled": {
          "description": "IsAutoInflateEnabled: Value that indicates whether AutoInflate is enabled for eventhub namespace.",
          "type": "boolean"
        },
        "kafkaEnabled": {
          "description": "KafkaEnabled: Value that indicates whether Kafka is enabled for eventhub namespace.",
          "type": "boolean"
        },
        "location": {
          "description": "Location: Resource location.",
          "type": "string"
        },
        "maximumThroughputUnits": {
          "description": "MaximumThroughputUnits: Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20\nthroughput units. ( '0' if AutoInflateEnabled = true)",
          "type": "integer"
        },
        "metricId": {
          "description": "MetricId: Identifier for Azure Insights metrics.",
          "type": "string"
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        },
        "privateEndpointConnections": {
          "description": "PrivateEndpointConnections: List of private endpoint connections.",
          "items": {
            "description": "Properties of the PrivateEndpointConnection.",
            "properties": {
              "id": {
                "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "ProvisioningState: Provisioning state of the Namespace.",
          "type": "string"
        },
        "serviceBusEndpoint": {
          "description": "ServiceBusEndpoint: Endpoint you can use to perform Service Bus operations.",
          "type": "string"
        },
        "sku": {
          "description": "Sku: Properties of sku resource",
          "properties": {
            "capacity": {
              "description": "Capacity: The Event Hubs throughput units for Basic or Standard tiers, where value should be 0 to 20 throughput units.\nThe Event Hubs premium units for Premium tier, where value should be 0 to 10 premium units.",
              "type": "integer"
            },
            "name": {
              "description": "Name: Name of this SKU.",
              "type": "string"
            },
            "tier": {
              "description": "Tier: The billing tier of this particular SKU.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "status": {
          "description": "Status: Status of the Namespace.",
          "type": "string"
        },
        "systemData": {
          "description": "SystemData: The system meta data relating to this resource.",
          "properties": {
            "createdAt": {
              "description": "CreatedAt: The timestamp of resource creation (UTC).",
              "type": "string"
            },
            "createdBy": {
              "description": "CreatedBy: The identity that created the resource.",
              "type": "string"
            },
            "createdByType": {
              "description": "CreatedByType: The type of identity that created the resource.",
              "type": "string"
            },
            "lastModifiedAt": {
              "description": "LastModifiedAt: The type of identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedBy": {
              "description": "LastModifiedBy: The identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedByType": {
              "description": "LastModifiedByType: The type of identity that last modified the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "type": {
          "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "type": "string"
        },
        "updatedAt": {
          "description": "UpdatedAt: The time the Namespace was updated.",
          "type": "string"
        },
        "zoneRedundant": {
          "description": "ZoneRedundant: Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones.",
          "type": "boolean"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
