{
  "description": "Generator information:\n- Generated from: /cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2024-08-15/cosmos-db.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/sqlDatabases/{databaseName}/containers/{containerName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "location": {
          "description": "Location: The location of the resource group to which the resource belongs.",
          "type": "string"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "options": {
          "description": "Options: A key-value pair of options to be applied for the request. This corresponds to the headers sent with the\nrequest.",
          "properties": {
            "autoscaleSettings": {
              "description": "AutoscaleSettings: Specifies the Autoscale settings. Note: Either throughput or autoscaleSettings is required, but not\nboth.",
              "properties": {
                "maxThroughput": {
                  "description": "MaxThroughput: Represents maximum throughput, the resource can scale up to.",
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "throughput": {
              "description": "Throughput: Request Units per second. For example, \"throughput\": 10000.",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a documentdb.azure.com/SqlDatabase resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "resource": {
          "description": "Resource: The standard JSON format of a container",
          "properties": {
            "analyticalStorageTtl": {
              "description": "AnalyticalStorageTtl: Analytical TTL.",
              "type": "integer"
            },
            "clientEncryptionPolicy": {
              "description": "ClientEncryptionPolicy: The client encryption policy for the container.",
              "properties": {
                "includedPaths": {
                  "description": "IncludedPaths: Paths of the item that need encryption along with path-specific settings.",
                  "items": {
                    "description": ".",
                    "properties": {
                      "clientEncryptionKeyId": {
                        "description": "ClientEncryptionKeyId: The identifier of the Client Encryption Key to be used to encrypt the path.",
                        "type": "string"
                      },
                      "encryptionAlgorithm": {
                        "description": "EncryptionAlgorithm: The encryption algorithm which will be used. Eg - AEAD_AES_256_CBC_HMAC_SHA256.",
                        "type": "string"
                      },
                      "encryptionType": {
                        "description": "EncryptionType: The type of encryption to be performed. Eg - Deterministic, Randomized.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path: Path that needs to be encrypted.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "clientEncryptionKeyId",
                      "encryptionAlgorithm",
                      "encryptionType",
                      "path"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "policyFormatVersion": {
                  "description": "PolicyFormatVersion: Version of the client encryption policy definition. Supported versions are 1 and 2. Version 2\nsupports id and partition key path encryption.",
                  "maximum": 2,
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "includedPaths",
                "policyFormatVersion"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "computedProperties": {
              "description": "ComputedProperties: List of computed properties",
              "items": {
                "description": "The definition of a computed property",
                "properties": {
                  "name": {
                    "description": "Name: The name of a computed property, for example - \"cp_lowerName\"",
                    "type": "string"
                  },
                  "query": {
                    "description": "Query: The query that evaluates the value for computed property, for example - \"SELECT VALUE LOWER(c.name) FROM c\"",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "conflictResolutionPolicy": {
              "description": "ConflictResolutionPolicy: The conflict resolution policy for the container.",
              "properties": {
                "conflictResolutionPath": {
                  "description": "ConflictResolutionPath: The conflict resolution path in the case of LastWriterWins mode.",
                  "type": "string"
                },
                "conflictResolutionProcedure": {
                  "description": "ConflictResolutionProcedure: The procedure to resolve conflicts in the case of custom mode.",
                  "type": "string"
                },
                "mode": {
                  "description": "Mode: Indicates the conflict resolution mode.",
                  "enum": [
                    "Custom",
                    "LastWriterWins"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "createMode": {
              "description": "CreateMode: Enum to indicate the mode of resource creation.",
              "enum": [
                "Default",
                "Restore"
              ],
              "type": "string"
            },
            "defaultTtl": {
              "description": "DefaultTtl: Default time to live",
              "type": "integer"
            },
            "id": {
              "description": "Id: Name of the Cosmos DB SQL container",
              "type": "string"
            },
            "indexingPolicy": {
              "description": "IndexingPolicy: The configuration of the indexing policy. By default, the indexing is automatic for all document paths\nwithin the container",
              "properties": {
                "automatic": {
                  "description": "Automatic: Indicates if the indexing policy is automatic",
                  "type": "boolean"
                },
                "compositeIndexes": {
                  "description": "CompositeIndexes: List of composite path list",
                  "items": {
                    "items": {
                      "properties": {
                        "order": {
                          "description": "Order: Sort order for composite paths.",
                          "enum": [
                            "ascending",
                            "descending"
                          ],
                          "type": "string"
                        },
                        "path": {
                          "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                "excludedPaths": {
                  "description": "ExcludedPaths: List of paths to exclude from indexing",
                  "items": {
                    "properties": {
                      "path": {
                        "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "includedPaths": {
                  "description": "IncludedPaths: List of paths to include in the indexing",
                  "items": {
                    "description": "The paths that are included in indexing",
                    "properties": {
                      "indexes": {
                        "description": "Indexes: List of indexes for this path",
                        "items": {
                          "description": "The indexes for the path.",
                          "properties": {
                            "dataType": {
                              "description": "DataType: The datatype for which the indexing behavior is applied to.",
                              "enum": [
                                "LineString",
                                "MultiPolygon",
                                "Number",
                                "Point",
                                "Polygon",
                                "String"
                              ],
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind: Indicates the type of index.",
                              "enum": [
                                "Hash",
                                "Range",
                                "Spatial"
                              ],
                              "type": "string"
                            },
                            "precision": {
                              "description": "Precision: The precision of the index. -1 is maximum precision.",
                              "type": "integer"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "path": {
                        "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "indexingMode": {
                  "description": "IndexingMode: Indicates the indexing mode.",
                  "enum": [
                    "consistent",
                    "lazy",
                    "none"
                  ],
                  "type": "string"
                },
                "spatialIndexes": {
                  "description": "SpatialIndexes: List of spatial specifics",
                  "items": {
                    "properties": {
                      "path": {
                        "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                        "type": "string"
                      },
                      "types": {
                        "description": "Types: List of path's spatial type",
                        "items": {
                          "description": "Indicates the spatial type of index.",
                          "enum": [
                            "LineString",
                            "MultiPolygon",
                            "Point",
                            "Polygon"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "partitionKey": {
              "description": "PartitionKey: The configuration of the partition key to be used for partitioning data into multiple partitions",
              "properties": {
                "kind": {
                  "description": "Kind: Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum)\nare supported for container create",
                  "enum": [
                    "Hash",
                    "MultiHash",
                    "Range"
                  ],
                  "type": "string"
                },
                "paths": {
                  "description": "Paths: List of paths using which data within the container can be partitioned",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "version": {
                  "description": "Version: Indicates the version of the partition key definition",
                  "maximum": 2,
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "restoreParameters": {
              "description": "RestoreParameters: Parameters to indicate the information about the restore",
              "properties": {
                "restoreSource": {
                  "description": "RestoreSource: The id of the restorable database account from which the restore has to be initiated. For example:\n/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}",
                  "type": "string"
                },
                "restoreTimestampInUtc": {
                  "description": "RestoreTimestampInUtc: Time to which the account has to be restored (ISO-8601 format).",
                  "type": "string"
                },
                "restoreWithTtlDisabled": {
                  "description": "RestoreWithTtlDisabled: Specifies whether the restored account will have Time-To-Live disabled upon the successful\nrestore.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "uniqueKeyPolicy": {
              "description": "UniqueKeyPolicy: The unique key policy configuration for specifying uniqueness constraints on documents in the\ncollection in the Azure Cosmos DB service.",
              "properties": {
                "uniqueKeys": {
                  "description": "UniqueKeys: List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure\nCosmos DB service.",
                  "items": {
                    "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                    "properties": {
                      "paths": {
                        "description": "Paths: List of paths must be unique for each document in the Azure Cosmos DB service",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "required": [
        "owner",
        "resource"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "id": {
          "description": "Id: The unique resource identifier of the ARM resource.",
          "type": "string"
        },
        "location": {
          "description": "Location: The location of the resource group to which the resource belongs.",
          "type": "string"
        },
        "name": {
          "description": "Name: The name of the ARM resource.",
          "type": "string"
        },
        "options": {
          "description": "Options: Cosmos DB options resource object",
          "properties": {
            "autoscaleSettings": {
              "description": "AutoscaleSettings: Specifies the Autoscale settings.",
              "properties": {
                "maxThroughput": {
                  "description": "MaxThroughput: Represents maximum throughput, the resource can scale up to.",
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "throughput": {
              "description": "Throughput: Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when\nretrieving offer details.",
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "resource": {
          "properties": {
            "_etag": {
              "description": "Etag: A system generated property representing the resource etag required for optimistic concurrency control.",
              "type": "string"
            },
            "_rid": {
              "description": "Rid: A system generated property. A unique identifier.",
              "type": "string"
            },
            "_ts": {
              "description": "Ts: A system generated property that denotes the last updated timestamp of the resource.",
              "type": "number"
            },
            "analyticalStorageTtl": {
              "description": "AnalyticalStorageTtl: Analytical TTL.",
              "type": "integer"
            },
            "clientEncryptionPolicy": {
              "description": "ClientEncryptionPolicy: The client encryption policy for the container.",
              "properties": {
                "includedPaths": {
                  "description": "IncludedPaths: Paths of the item that need encryption along with path-specific settings.",
                  "items": {
                    "description": ".",
                    "properties": {
                      "clientEncryptionKeyId": {
                        "description": "ClientEncryptionKeyId: The identifier of the Client Encryption Key to be used to encrypt the path.",
                        "type": "string"
                      },
                      "encryptionAlgorithm": {
                        "description": "EncryptionAlgorithm: The encryption algorithm which will be used. Eg - AEAD_AES_256_CBC_HMAC_SHA256.",
                        "type": "string"
                      },
                      "encryptionType": {
                        "description": "EncryptionType: The type of encryption to be performed. Eg - Deterministic, Randomized.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path: Path that needs to be encrypted.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "policyFormatVersion": {
                  "description": "PolicyFormatVersion: Version of the client encryption policy definition. Supported versions are 1 and 2. Version 2\nsupports id and partition key path encryption.",
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "computedProperties": {
              "description": "ComputedProperties: List of computed properties",
              "items": {
                "description": "The definition of a computed property",
                "properties": {
                  "name": {
                    "description": "Name: The name of a computed property, for example - \"cp_lowerName\"",
                    "type": "string"
                  },
                  "query": {
                    "description": "Query: The query that evaluates the value for computed property, for example - \"SELECT VALUE LOWER(c.name) FROM c\"",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "conflictResolutionPolicy": {
              "description": "ConflictResolutionPolicy: The conflict resolution policy for the container.",
              "properties": {
                "conflictResolutionPath": {
                  "description": "ConflictResolutionPath: The conflict resolution path in the case of LastWriterWins mode.",
                  "type": "string"
                },
                "conflictResolutionProcedure": {
                  "description": "ConflictResolutionProcedure: The procedure to resolve conflicts in the case of custom mode.",
                  "type": "string"
                },
                "mode": {
                  "description": "Mode: Indicates the conflict resolution mode.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "createMode": {
              "description": "CreateMode: Enum to indicate the mode of resource creation.",
              "type": "string"
            },
            "defaultTtl": {
              "description": "DefaultTtl: Default time to live",
              "type": "integer"
            },
            "id": {
              "description": "Id: Name of the Cosmos DB SQL container",
              "type": "string"
            },
            "indexingPolicy": {
              "description": "IndexingPolicy: The configuration of the indexing policy. By default, the indexing is automatic for all document paths\nwithin the container",
              "properties": {
                "automatic": {
                  "description": "Automatic: Indicates if the indexing policy is automatic",
                  "type": "boolean"
                },
                "compositeIndexes": {
                  "description": "CompositeIndexes: List of composite path list",
                  "items": {
                    "items": {
                      "properties": {
                        "order": {
                          "description": "Order: Sort order for composite paths.",
                          "type": "string"
                        },
                        "path": {
                          "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                "excludedPaths": {
                  "description": "ExcludedPaths: List of paths to exclude from indexing",
                  "items": {
                    "properties": {
                      "path": {
                        "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "includedPaths": {
                  "description": "IncludedPaths: List of paths to include in the indexing",
                  "items": {
                    "description": "The paths that are included in indexing",
                    "properties": {
                      "indexes": {
                        "description": "Indexes: List of indexes for this path",
                        "items": {
                          "description": "The indexes for the path.",
                          "properties": {
                            "dataType": {
                              "description": "DataType: The datatype for which the indexing behavior is applied to.",
                              "type": "string"
                            },
                            "kind": {
                              "description": "Kind: Indicates the type of index.",
                              "type": "string"
                            },
                            "precision": {
                              "description": "Precision: The precision of the index. -1 is maximum precision.",
                              "type": "integer"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "type": "array"
                      },
                      "path": {
                        "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "indexingMode": {
                  "description": "IndexingMode: Indicates the indexing mode.",
                  "type": "string"
                },
                "spatialIndexes": {
                  "description": "SpatialIndexes: List of spatial specifics",
                  "items": {
                    "properties": {
                      "path": {
                        "description": "Path: The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard\n(/path/*)",
                        "type": "string"
                      },
                      "types": {
                        "description": "Types: List of path's spatial type",
                        "items": {
                          "description": "Indicates the spatial type of index.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "partitionKey": {
              "description": "PartitionKey: The configuration of the partition key to be used for partitioning data into multiple partitions",
              "properties": {
                "kind": {
                  "description": "Kind: Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum)\nare supported for container create",
                  "type": "string"
                },
                "paths": {
                  "description": "Paths: List of paths using which data within the container can be partitioned",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "systemKey": {
                  "description": "SystemKey: Indicates if the container is using a system generated partition key",
                  "type": "boolean"
                },
                "version": {
                  "description": "Version: Indicates the version of the partition key definition",
                  "type": "integer"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "restoreParameters": {
              "description": "RestoreParameters: Parameters to indicate the information about the restore",
              "properties": {
                "restoreSource": {
                  "description": "RestoreSource: The id of the restorable database account from which the restore has to be initiated. For example:\n/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}",
                  "type": "string"
                },
                "restoreTimestampInUtc": {
                  "description": "RestoreTimestampInUtc: Time to which the account has to be restored (ISO-8601 format).",
                  "type": "string"
                },
                "restoreWithTtlDisabled": {
                  "description": "RestoreWithTtlDisabled: Specifies whether the restored account will have Time-To-Live disabled upon the successful\nrestore.",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "uniqueKeyPolicy": {
              "description": "UniqueKeyPolicy: The unique key policy configuration for specifying uniqueness constraints on documents in the\ncollection in the Azure Cosmos DB service.",
              "properties": {
                "uniqueKeys": {
                  "description": "UniqueKeys: List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure\nCosmos DB service.",
                  "items": {
                    "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
                    "properties": {
                      "paths": {
                        "description": "Paths: List of paths must be unique for each document in the Azure Cosmos DB service",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "type": {
          "description": "Type: The type of Azure resource.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
