{
  "description": "Generator information:\n- Generated from: /azure-kusto/resource-manager/Microsoft.Kusto/stable/2023-08-15/kusto.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "pattern": "^.*$",
          "type": "string"
        },
        "cosmosDbDataConnection": {
          "description": "CosmosDb: Mutually exclusive with all other properties",
          "properties": {
            "cosmosDbAccountResourceReference": {
              "description": "CosmosDbAccountResourceReference: The resource ID of the Cosmos DB account used to create the data connection.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "cosmosDbContainer": {
              "description": "CosmosDbContainer: The name of an existing container in the Cosmos DB database.",
              "type": "string"
            },
            "cosmosDbDatabase": {
              "description": "CosmosDbDatabase: The name of an existing database in the Cosmos DB account.",
              "type": "string"
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "enum": [
                "CosmosDb"
              ],
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "managedIdentityResourceReference": {
              "description": "ManagedIdentityResourceReference: The resource ID of a managed system or user-assigned identity. The identity is used to\nauthenticate with Cosmos DB.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The name of an existing mapping rule to use when ingesting the retrieved data.",
              "type": "string"
            },
            "retrievalStartDate": {
              "description": "RetrievalStartDate: Optional. If defined, the data connection retrieves Cosmos DB documents created or updated after the\nspecified retrieval start date.",
              "type": "string"
            },
            "tableName": {
              "description": "TableName: The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this\ntable.",
              "type": "string"
            }
          },
          "required": [
            "cosmosDbAccountResourceReference",
            "cosmosDbContainer",
            "cosmosDbDatabase",
            "kind",
            "managedIdentityResourceReference",
            "tableName"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "eventGridDataConnection": {
          "description": "EventGrid: Mutually exclusive with all other properties",
          "properties": {
            "blobStorageEventType": {
              "description": "BlobStorageEventType: The name of blob storage event type to process.",
              "enum": [
                "Microsoft.Storage.BlobCreated",
                "Microsoft.Storage.BlobRenamed"
              ],
              "type": "string"
            },
            "consumerGroup": {
              "description": "ConsumerGroup: The event hub consumer group.",
              "type": "string"
            },
            "dataFormat": {
              "description": "DataFormat: The data format of the message. Optionally the data format can be added to each message.",
              "enum": [
                "APACHEAVRO",
                "AVRO",
                "CSV",
                "JSON",
                "MULTIJSON",
                "ORC",
                "PARQUET",
                "PSV",
                "RAW",
                "SCSV",
                "SINGLEJSON",
                "SOHSV",
                "TSV",
                "TSVE",
                "TXT",
                "W3CLOGFILE"
              ],
              "type": "string"
            },
            "databaseRouting": {
              "description": "DatabaseRouting: Indication for database routing information from the data connection, by default only database routing\ninformation is allowed",
              "enum": [
                "Multi",
                "Single"
              ],
              "type": "string"
            },
            "eventGridResourceReference": {
              "description": "EventGridResourceReference: The resource ID of the event grid that is subscribed to the storage account events.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "eventHubResourceReference": {
              "description": "EventHubResourceReference: The resource ID where the event grid is configured to send events.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "ignoreFirstRecord": {
              "description": "IgnoreFirstRecord: A Boolean value that, if set to true, indicates that ingestion should ignore the first record of\nevery file",
              "type": "boolean"
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "enum": [
                "EventGrid"
              ],
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "managedIdentityResourceReference": {
              "description": "ManagedIdentityResourceReference: The resource ID of a managed identity (system or user assigned) to be used to\nauthenticate with event hub and storage account.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each\nmessage.",
              "type": "string"
            },
            "storageAccountResourceReference": {
              "description": "StorageAccountResourceReference: The resource ID of the storage account where the data resides.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "tableName": {
              "description": "TableName: The table where the data should be ingested. Optionally the table information can be added to each message.",
              "type": "string"
            }
          },
          "required": [
            "consumerGroup",
            "eventHubResourceReference",
            "kind",
            "storageAccountResourceReference"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "eventHubDataConnection": {
          "description": "EventHub: Mutually exclusive with all other properties",
          "properties": {
            "compression": {
              "description": "Compression: The event hub messages compression type",
              "enum": [
                "GZip",
                "None"
              ],
              "type": "string"
            },
            "consumerGroup": {
              "description": "ConsumerGroup: The event hub consumer group.",
              "type": "string"
            },
            "dataFormat": {
              "description": "DataFormat: The data format of the message. Optionally the data format can be added to each message.",
              "enum": [
                "APACHEAVRO",
                "AVRO",
                "CSV",
                "JSON",
                "MULTIJSON",
                "ORC",
                "PARQUET",
                "PSV",
                "RAW",
                "SCSV",
                "SINGLEJSON",
                "SOHSV",
                "TSV",
                "TSVE",
                "TXT",
                "W3CLOGFILE"
              ],
              "type": "string"
            },
            "databaseRouting": {
              "description": "DatabaseRouting: Indication for database routing information from the data connection, by default only database routing\ninformation is allowed",
              "enum": [
                "Multi",
                "Single"
              ],
              "type": "string"
            },
            "eventHubResourceReference": {
              "description": "EventHubResourceReference: The resource ID of the event hub to be used to create a data connection.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "eventSystemProperties": {
              "description": "EventSystemProperties: System properties of the event hub",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "enum": [
                "EventHub"
              ],
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "managedIdentityResourceReference": {
              "description": "ManagedIdentityResourceReference: The resource ID of a managed identity (system or user assigned) to be used to\nauthenticate with event hub.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each\nmessage.",
              "type": "string"
            },
            "retrievalStartDate": {
              "description": "RetrievalStartDate: When defined, the data connection retrieves existing Event hub events created since the Retrieval\nstart date. It can only retrieve events retained by the Event hub, based on its retention period.",
              "type": "string"
            },
            "tableName": {
              "description": "TableName: The table where the data should be ingested. Optionally the table information can be added to each message.",
              "type": "string"
            }
          },
          "required": [
            "consumerGroup",
            "eventHubResourceReference",
            "kind"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "iotHubDataConnection": {
          "description": "IotHub: Mutually exclusive with all other properties",
          "properties": {
            "consumerGroup": {
              "description": "ConsumerGroup: The iot hub consumer group.",
              "type": "string"
            },
            "dataFormat": {
              "description": "DataFormat: The data format of the message. Optionally the data format can be added to each message.",
              "enum": [
                "APACHEAVRO",
                "AVRO",
                "CSV",
                "JSON",
                "MULTIJSON",
                "ORC",
                "PARQUET",
                "PSV",
                "RAW",
                "SCSV",
                "SINGLEJSON",
                "SOHSV",
                "TSV",
                "TSVE",
                "TXT",
                "W3CLOGFILE"
              ],
              "type": "string"
            },
            "databaseRouting": {
              "description": "DatabaseRouting: Indication for database routing information from the data connection, by default only database routing\ninformation is allowed",
              "enum": [
                "Multi",
                "Single"
              ],
              "type": "string"
            },
            "eventSystemProperties": {
              "description": "EventSystemProperties: System properties of the iot hub",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "iotHubResourceReference": {
              "description": "IotHubResourceReference: The resource ID of the Iot hub to be used to create a data connection.",
              "properties": {
                "armId": {
                  "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                  "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                  "type": "string"
                },
                "group": {
                  "description": "Group is the Kubernetes group of the resource.",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind is the Kubernetes kind of the resource.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the Kubernetes name of the resource.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "enum": [
                "IotHub"
              ],
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each\nmessage.",
              "type": "string"
            },
            "retrievalStartDate": {
              "description": "RetrievalStartDate: When defined, the data connection retrieves existing Event hub events created since the Retrieval\nstart date. It can only retrieve events retained by the Event hub, based on its retention period.",
              "type": "string"
            },
            "sharedAccessPolicyName": {
              "description": "SharedAccessPolicyName: The name of the share access policy",
              "type": "string"
            },
            "tableName": {
              "description": "TableName: The table where the data should be ingested. Optionally the table information can be added to each message.",
              "type": "string"
            }
          },
          "required": [
            "consumerGroup",
            "iotHubResourceReference",
            "kind",
            "sharedAccessPolicyName"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a kusto.azure.com/Database resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "cosmosDb": {
          "description": "CosmosDb: Mutually exclusive with all other properties",
          "properties": {
            "cosmosDbAccountResourceId": {
              "description": "CosmosDbAccountResourceId: The resource ID of the Cosmos DB account used to create the data connection.",
              "type": "string"
            },
            "cosmosDbContainer": {
              "description": "CosmosDbContainer: The name of an existing container in the Cosmos DB database.",
              "type": "string"
            },
            "cosmosDbDatabase": {
              "description": "CosmosDbDatabase: The name of an existing database in the Cosmos DB account.",
              "type": "string"
            },
            "id": {
              "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
              "type": "string"
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "managedIdentityObjectId": {
              "description": "ManagedIdentityObjectId: The object ID of the managed identity resource.",
              "type": "string"
            },
            "managedIdentityResourceId": {
              "description": "ManagedIdentityResourceId: The resource ID of a managed system or user-assigned identity. The identity is used to\nauthenticate with Cosmos DB.",
              "type": "string"
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The name of an existing mapping rule to use when ingesting the retrieved data.",
              "type": "string"
            },
            "provisioningState": {
              "description": "ProvisioningState: The provisioned state of the resource.",
              "type": "string"
            },
            "retrievalStartDate": {
              "description": "RetrievalStartDate: Optional. If defined, the data connection retrieves Cosmos DB documents created or updated after the\nspecified retrieval start date.",
              "type": "string"
            },
            "tableName": {
              "description": "TableName: The case-sensitive name of the existing target table in your cluster. Retrieved data is ingested into this\ntable.",
              "type": "string"
            },
            "type": {
              "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "eventGrid": {
          "description": "EventGrid: Mutually exclusive with all other properties",
          "properties": {
            "blobStorageEventType": {
              "description": "BlobStorageEventType: The name of blob storage event type to process.",
              "type": "string"
            },
            "consumerGroup": {
              "description": "ConsumerGroup: The event hub consumer group.",
              "type": "string"
            },
            "dataFormat": {
              "description": "DataFormat: The data format of the message. Optionally the data format can be added to each message.",
              "type": "string"
            },
            "databaseRouting": {
              "description": "DatabaseRouting: Indication for database routing information from the data connection, by default only database routing\ninformation is allowed",
              "type": "string"
            },
            "eventGridResourceId": {
              "description": "EventGridResourceId: The resource ID of the event grid that is subscribed to the storage account events.",
              "type": "string"
            },
            "eventHubResourceId": {
              "description": "EventHubResourceId: The resource ID where the event grid is configured to send events.",
              "type": "string"
            },
            "id": {
              "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
              "type": "string"
            },
            "ignoreFirstRecord": {
              "description": "IgnoreFirstRecord: A Boolean value that, if set to true, indicates that ingestion should ignore the first record of\nevery file",
              "type": "boolean"
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "managedIdentityObjectId": {
              "description": "ManagedIdentityObjectId: The object ID of managedIdentityResourceId",
              "type": "string"
            },
            "managedIdentityResourceId": {
              "description": "ManagedIdentityResourceId: The resource ID of a managed identity (system or user assigned) to be used to authenticate\nwith event hub and storage account.",
              "type": "string"
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each\nmessage.",
              "type": "string"
            },
            "provisioningState": {
              "description": "ProvisioningState: The provisioned state of the resource.",
              "type": "string"
            },
            "storageAccountResourceId": {
              "description": "StorageAccountResourceId: The resource ID of the storage account where the data resides.",
              "type": "string"
            },
            "tableName": {
              "description": "TableName: The table where the data should be ingested. Optionally the table information can be added to each message.",
              "type": "string"
            },
            "type": {
              "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "eventHub": {
          "description": "EventHub: Mutually exclusive with all other properties",
          "properties": {
            "compression": {
              "description": "Compression: The event hub messages compression type",
              "type": "string"
            },
            "consumerGroup": {
              "description": "ConsumerGroup: The event hub consumer group.",
              "type": "string"
            },
            "dataFormat": {
              "description": "DataFormat: The data format of the message. Optionally the data format can be added to each message.",
              "type": "string"
            },
            "databaseRouting": {
              "description": "DatabaseRouting: Indication for database routing information from the data connection, by default only database routing\ninformation is allowed",
              "type": "string"
            },
            "eventHubResourceId": {
              "description": "EventHubResourceId: The resource ID of the event hub to be used to create a data connection.",
              "type": "string"
            },
            "eventSystemProperties": {
              "description": "EventSystemProperties: System properties of the event hub",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "id": {
              "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
              "type": "string"
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "managedIdentityObjectId": {
              "description": "ManagedIdentityObjectId: The object ID of the managedIdentityResourceId",
              "type": "string"
            },
            "managedIdentityResourceId": {
              "description": "ManagedIdentityResourceId: The resource ID of a managed identity (system or user assigned) to be used to authenticate\nwith event hub.",
              "type": "string"
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each\nmessage.",
              "type": "string"
            },
            "provisioningState": {
              "description": "ProvisioningState: The provisioned state of the resource.",
              "type": "string"
            },
            "retrievalStartDate": {
              "description": "RetrievalStartDate: When defined, the data connection retrieves existing Event hub events created since the Retrieval\nstart date. It can only retrieve events retained by the Event hub, based on its retention period.",
              "type": "string"
            },
            "tableName": {
              "description": "TableName: The table where the data should be ingested. Optionally the table information can be added to each message.",
              "type": "string"
            },
            "type": {
              "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "iotHub": {
          "description": "IotHub: Mutually exclusive with all other properties",
          "properties": {
            "consumerGroup": {
              "description": "ConsumerGroup: The iot hub consumer group.",
              "type": "string"
            },
            "dataFormat": {
              "description": "DataFormat: The data format of the message. Optionally the data format can be added to each message.",
              "type": "string"
            },
            "databaseRouting": {
              "description": "DatabaseRouting: Indication for database routing information from the data connection, by default only database routing\ninformation is allowed",
              "type": "string"
            },
            "eventSystemProperties": {
              "description": "EventSystemProperties: System properties of the iot hub",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "id": {
              "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
              "type": "string"
            },
            "iotHubResourceId": {
              "description": "IotHubResourceId: The resource ID of the Iot hub to be used to create a data connection.",
              "type": "string"
            },
            "kind": {
              "description": "Kind: Kind of the endpoint for the data connection",
              "type": "string"
            },
            "location": {
              "description": "Location: Resource location.",
              "type": "string"
            },
            "mappingRuleName": {
              "description": "MappingRuleName: The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each\nmessage.",
              "type": "string"
            },
            "provisioningState": {
              "description": "ProvisioningState: The provisioned state of the resource.",
              "type": "string"
            },
            "retrievalStartDate": {
              "description": "RetrievalStartDate: When defined, the data connection retrieves existing Event hub events created since the Retrieval\nstart date. It can only retrieve events retained by the Event hub, based on its retention period.",
              "type": "string"
            },
            "sharedAccessPolicyName": {
              "description": "SharedAccessPolicyName: The name of the share access policy",
              "type": "string"
            },
            "tableName": {
              "description": "TableName: The table where the data should be ingested. Optionally the table information can be added to each message.",
              "type": "string"
            },
            "type": {
              "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
