{
  "description": "Generator information:\n- Generated from: /applicationinsights/resource-manager/Microsoft.Insights/stable/2022-06-15/webTests_API.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "Configuration": {
          "description": "Configuration: An XML configuration specification for a WebTest.",
          "properties": {
            "WebTest": {
              "description": "WebTest: The XML specification of a WebTest to run against an application.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "Description": {
          "description": "Description: User defined description for this WebTest.",
          "type": "string"
        },
        "Enabled": {
          "description": "Enabled: Is the test actively being monitored.",
          "type": "boolean"
        },
        "Frequency": {
          "description": "Frequency: Interval in seconds between test runs for this WebTest. Default value is 300.",
          "type": "integer"
        },
        "Kind": {
          "description": "Kind: The kind of web test this is, valid choices are ping, multistep and standard.",
          "enum": [
            "multistep",
            "ping",
            "standard"
          ],
          "type": "string"
        },
        "Locations": {
          "description": "Locations: A list of where to physically run the tests from to give global coverage for accessibility of your\napplication.",
          "items": {
            "description": "Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.",
            "properties": {
              "Id": {
                "description": "Id: Location ID for the WebTest to run from.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "Name": {
          "description": "Name: User defined name if this WebTest.",
          "type": "string"
        },
        "Request": {
          "description": "Request: The collection of request properties",
          "properties": {
            "FollowRedirects": {
              "description": "FollowRedirects: Follow redirects for this web test.",
              "type": "boolean"
            },
            "Headers": {
              "description": "Headers: List of headers and their values to add to the WebTest call.",
              "items": {
                "description": "A header to add to the WebTest.",
                "properties": {
                  "key": {
                    "description": "Key: The name of the header.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value: The value of the header.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "HttpVerb": {
              "description": "HttpVerb: Http verb to use for this web test.",
              "type": "string"
            },
            "ParseDependentRequests": {
              "description": "ParseDependentRequests: Parse Dependent request for this WebTest.",
              "type": "boolean"
            },
            "RequestBody": {
              "description": "RequestBody: Base64 encoded string body to send with this web test.",
              "type": "string"
            },
            "RequestUrl": {
              "description": "RequestUrl: Url location to test.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "RetryEnabled": {
          "description": "RetryEnabled: Allow for retries should this WebTest fail.",
          "type": "boolean"
        },
        "SyntheticMonitorId": {
          "description": "SyntheticMonitorId: Unique ID of this WebTest. This is typically the same value as the Name field.",
          "type": "string"
        },
        "Timeout": {
          "description": "Timeout: Seconds until this WebTest will timeout and fail. Default value is 30.",
          "type": "integer"
        },
        "ValidationRules": {
          "description": "ValidationRules: The collection of validation rule properties",
          "properties": {
            "ContentValidation": {
              "description": "ContentValidation: The collection of content validation properties",
              "properties": {
                "ContentMatch": {
                  "description": "ContentMatch: Content to look for in the return of the WebTest.  Must not be null or empty.",
                  "type": "string"
                },
                "IgnoreCase": {
                  "description": "IgnoreCase: When set, this value makes the ContentMatch validation case insensitive.",
                  "type": "boolean"
                },
                "PassIfTextFound": {
                  "description": "PassIfTextFound: When true, validation will pass if there is a match for the ContentMatch string.  If false, validation\nwill fail if there is a match",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "ExpectedHttpStatusCode": {
              "description": "ExpectedHttpStatusCode: Validate that the WebTest returns the http status code provided.",
              "type": "integer"
            },
            "IgnoreHttpStatusCode": {
              "description": "IgnoreHttpStatusCode: When set, validation will ignore the status code.",
              "type": "boolean"
            },
            "SSLCertRemainingLifetimeCheck": {
              "description": "SSLCertRemainingLifetimeCheck: A number of days to check still remain before the the existing SSL cert expires.  Value\nmust be positive and the SSLCheck must be set to true.",
              "type": "integer"
            },
            "SSLCheck": {
              "description": "SSLCheck: Checks to see if the SSL cert is still valid.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "location": {
          "description": "Location: Resource location",
          "type": "string"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a resources.azure.com/ResourceGroup resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags",
          "type": "object"
        }
      },
      "required": [
        "Kind",
        "Locations",
        "Name",
        "SyntheticMonitorId",
        "location",
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "Configuration": {
          "description": "Configuration: An XML configuration specification for a WebTest.",
          "properties": {
            "WebTest": {
              "description": "WebTest: The XML specification of a WebTest to run against an application.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "Description": {
          "description": "Description: User defined description for this WebTest.",
          "type": "string"
        },
        "Enabled": {
          "description": "Enabled: Is the test actively being monitored.",
          "type": "boolean"
        },
        "Frequency": {
          "description": "Frequency: Interval in seconds between test runs for this WebTest. Default value is 300.",
          "type": "integer"
        },
        "Kind": {
          "description": "Kind: The kind of web test this is, valid choices are ping, multistep and standard.",
          "type": "string"
        },
        "Locations": {
          "description": "Locations: A list of where to physically run the tests from to give global coverage for accessibility of your\napplication.",
          "items": {
            "description": "Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.",
            "properties": {
              "Id": {
                "description": "Id: Location ID for the WebTest to run from.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "Request": {
          "description": "Request: The collection of request properties",
          "properties": {
            "FollowRedirects": {
              "description": "FollowRedirects: Follow redirects for this web test.",
              "type": "boolean"
            },
            "Headers": {
              "description": "Headers: List of headers and their values to add to the WebTest call.",
              "items": {
                "description": "A header to add to the WebTest.",
                "properties": {
                  "key": {
                    "description": "Key: The name of the header.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value: The value of the header.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "HttpVerb": {
              "description": "HttpVerb: Http verb to use for this web test.",
              "type": "string"
            },
            "ParseDependentRequests": {
              "description": "ParseDependentRequests: Parse Dependent request for this WebTest.",
              "type": "boolean"
            },
            "RequestBody": {
              "description": "RequestBody: Base64 encoded string body to send with this web test.",
              "type": "string"
            },
            "RequestUrl": {
              "description": "RequestUrl: Url location to test.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "RetryEnabled": {
          "description": "RetryEnabled: Allow for retries should this WebTest fail.",
          "type": "boolean"
        },
        "SyntheticMonitorId": {
          "description": "SyntheticMonitorId: Unique ID of this WebTest. This is typically the same value as the Name field.",
          "type": "string"
        },
        "Timeout": {
          "description": "Timeout: Seconds until this WebTest will timeout and fail. Default value is 30.",
          "type": "integer"
        },
        "ValidationRules": {
          "description": "ValidationRules: The collection of validation rule properties",
          "properties": {
            "ContentValidation": {
              "description": "ContentValidation: The collection of content validation properties",
              "properties": {
                "ContentMatch": {
                  "description": "ContentMatch: Content to look for in the return of the WebTest.  Must not be null or empty.",
                  "type": "string"
                },
                "IgnoreCase": {
                  "description": "IgnoreCase: When set, this value makes the ContentMatch validation case insensitive.",
                  "type": "boolean"
                },
                "PassIfTextFound": {
                  "description": "PassIfTextFound: When true, validation will pass if there is a match for the ContentMatch string.  If false, validation\nwill fail if there is a match",
                  "type": "boolean"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "ExpectedHttpStatusCode": {
              "description": "ExpectedHttpStatusCode: Validate that the WebTest returns the http status code provided.",
              "type": "integer"
            },
            "IgnoreHttpStatusCode": {
              "description": "IgnoreHttpStatusCode: When set, validation will ignore the status code.",
              "type": "boolean"
            },
            "SSLCertRemainingLifetimeCheck": {
              "description": "SSLCertRemainingLifetimeCheck: A number of days to check still remain before the the existing SSL cert expires.  Value\nmust be positive and the SSLCheck must be set to true.",
              "type": "integer"
            },
            "SSLCheck": {
              "description": "SSLCheck: Checks to see if the SSL cert is still valid.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "id": {
          "description": "Id: Azure resource Id",
          "type": "string"
        },
        "location": {
          "description": "Location: Resource location",
          "type": "string"
        },
        "name": {
          "description": "Name: Azure resource name",
          "type": "string"
        },
        "properties_name": {
          "description": "PropertiesName: User defined name if this WebTest.",
          "type": "string"
        },
        "provisioningState": {
          "description": "ProvisioningState: Current state of this component, whether or not is has been provisioned within the resource group it\nis defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying,\nCanceled, and Failed.",
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags",
          "type": "object"
        },
        "type": {
          "description": "Type: Azure resource type",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
