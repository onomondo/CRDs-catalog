{
  "description": "Generator information:\n- Generated from: /compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2022-03-01/virtualMachineScaleSet.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensions/{vmssExtensionName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "autoUpgradeMinorVersion": {
          "description": "AutoUpgradeMinorVersion: Indicates whether the extension should use a newer minor version if one is available at\ndeployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this\nproperty set to true.",
          "type": "boolean"
        },
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "enableAutomaticUpgrade": {
          "description": "EnableAutomaticUpgrade: Indicates whether the extension should be automatically upgraded by the platform if there is a\nnewer version of the extension available.",
          "type": "boolean"
        },
        "forceUpdateTag": {
          "description": "ForceUpdateTag: If a value is provided and is different from the previous value, the extension handler will be forced to\nupdate even if the extension configuration has not changed.",
          "type": "string"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a compute.azure.com/VirtualMachineScaleSet resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "protectedSettings": {
          "description": "ProtectedSettings: The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected\nsettings at all.",
          "properties": {
            "name": {
              "description": "Name is the name of the Kubernetes secret being referenced.\nThe secret must be in the same namespace as the resource",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "protectedSettingsFromKeyVault": {
          "description": "ProtectedSettingsFromKeyVault: The extensions protected settings that are passed by reference, and consumed from key\nvault",
          "properties": {
            "secretUrl": {
              "description": "SecretUrl: The URL referencing a secret in a Key Vault.",
              "type": "string"
            },
            "sourceVault": {
              "description": "SourceVault: The relative URL of the Key Vault containing the secret.",
              "properties": {
                "reference": {
                  "description": "Reference: Resource Id",
                  "properties": {
                    "armId": {
                      "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                      "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                      "type": "string"
                    },
                    "group": {
                      "description": "Group is the Kubernetes group of the resource.",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is the Kubernetes kind of the resource.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the Kubernetes name of the resource.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "secretUrl",
            "sourceVault"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "provisionAfterExtensions": {
          "description": "ProvisionAfterExtensions: Collection of extension names after which this extension needs to be provisioned.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "publisher": {
          "description": "Publisher: The name of the extension handler publisher.",
          "type": "string"
        },
        "settings": {
          "additionalProperties": {
            "x-kubernetes-preserve-unknown-fields": true
          },
          "description": "Settings: Json formatted public settings for the extension.",
          "type": "object"
        },
        "suppressFailures": {
          "description": "SuppressFailures: Indicates whether failures stemming from the extension will be suppressed (Operational failures such\nas not connecting to the VM will not be suppressed regardless of this value). The default is false.",
          "type": "boolean"
        },
        "type": {
          "description": "Type: Specifies the type of the extension; an example is \"CustomScriptExtension\".",
          "type": "string"
        },
        "typeHandlerVersion": {
          "description": "TypeHandlerVersion: Specifies the version of the script handler.",
          "type": "string"
        }
      },
      "required": [
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "autoUpgradeMinorVersion": {
          "description": "AutoUpgradeMinorVersion: Indicates whether the extension should use a newer minor version if one is available at\ndeployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this\nproperty set to true.",
          "type": "boolean"
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "enableAutomaticUpgrade": {
          "description": "EnableAutomaticUpgrade: Indicates whether the extension should be automatically upgraded by the platform if there is a\nnewer version of the extension available.",
          "type": "boolean"
        },
        "forceUpdateTag": {
          "description": "ForceUpdateTag: If a value is provided and is different from the previous value, the extension handler will be forced to\nupdate even if the extension configuration has not changed.",
          "type": "string"
        },
        "id": {
          "description": "Id: Resource Id",
          "type": "string"
        },
        "name": {
          "description": "Name: The name of the extension.",
          "type": "string"
        },
        "properties_type": {
          "description": "PropertiesType: Specifies the type of the extension; an example is \"CustomScriptExtension\".",
          "type": "string"
        },
        "protectedSettingsFromKeyVault": {
          "description": "ProtectedSettingsFromKeyVault: The extensions protected settings that are passed by reference, and consumed from key\nvault",
          "properties": {
            "secretUrl": {
              "description": "SecretUrl: The URL referencing a secret in a Key Vault.",
              "type": "string"
            },
            "sourceVault": {
              "description": "SourceVault: The relative URL of the Key Vault containing the secret.",
              "properties": {
                "id": {
                  "description": "Id: Resource Id",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "provisionAfterExtensions": {
          "description": "ProvisionAfterExtensions: Collection of extension names after which this extension needs to be provisioned.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "ProvisioningState: The provisioning state, which only appears in the response.",
          "type": "string"
        },
        "publisher": {
          "description": "Publisher: The name of the extension handler publisher.",
          "type": "string"
        },
        "settings": {
          "additionalProperties": {
            "x-kubernetes-preserve-unknown-fields": true
          },
          "description": "Settings: Json formatted public settings for the extension.",
          "type": "object"
        },
        "suppressFailures": {
          "description": "SuppressFailures: Indicates whether failures stemming from the extension will be suppressed (Operational failures such\nas not connecting to the VM will not be suppressed regardless of this value). The default is false.",
          "type": "boolean"
        },
        "type": {
          "description": "Type: Resource type",
          "type": "string"
        },
        "typeHandlerVersion": {
          "description": "TypeHandlerVersion: Specifies the version of the script handler.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
