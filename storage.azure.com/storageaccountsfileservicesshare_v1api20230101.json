{
  "description": "Generator information:\n- Generated from: /storage/resource-manager/Microsoft.Storage/stable/2023-01-01/file.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "accessTier": {
          "description": "AccessTier: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and\nCool. FileStorage account can choose Premium.",
          "enum": [
            "Cool",
            "Hot",
            "Premium",
            "TransactionOptimized"
          ],
          "type": "string"
        },
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "maxLength": 63,
          "minLength": 3,
          "type": "string"
        },
        "enabledProtocols": {
          "description": "EnabledProtocols: The authentication protocol that is used for the file share. Can only be specified when creating a\nshare.",
          "enum": [
            "NFS",
            "SMB"
          ],
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata: A name-value pair to associate with the share as metadata.",
          "type": "object"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a storage.azure.com/StorageAccountsFileService resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "rootSquash": {
          "description": "RootSquash: The property is for NFS share only. The default is NoRootSquash.",
          "enum": [
            "AllSquash",
            "NoRootSquash",
            "RootSquash"
          ],
          "type": "string"
        },
        "shareQuota": {
          "description": "ShareQuota: The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).\nFor Large File Shares, the maximum size is 102400.",
          "maximum": 102400,
          "minimum": 1,
          "type": "integer"
        },
        "signedIdentifiers": {
          "description": "SignedIdentifiers: List of stored access policies specified on the share.",
          "items": {
            "properties": {
              "accessPolicy": {
                "description": "AccessPolicy: Access policy",
                "properties": {
                  "expiryTime": {
                    "description": "ExpiryTime: Expiry time of the access policy",
                    "type": "string"
                  },
                  "permission": {
                    "description": "Permission: List of abbreviated permissions.",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "StartTime: Start time of the access policy",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "reference": {
                "description": "Reference: An unique identifier of the stored access policy.",
                "properties": {
                  "armId": {
                    "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                    "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                    "type": "string"
                  },
                  "group": {
                    "description": "Group is the Kubernetes group of the resource.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is the Kubernetes kind of the resource.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the Kubernetes name of the resource.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "required": [
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "accessTier": {
          "description": "AccessTier: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and\nCool. FileStorage account can choose Premium.",
          "type": "string"
        },
        "accessTierChangeTime": {
          "description": "AccessTierChangeTime: Indicates the last modification time for share access tier.",
          "type": "string"
        },
        "accessTierStatus": {
          "description": "AccessTierStatus: Indicates if there is a pending transition for access tier.",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "deleted": {
          "description": "Deleted: Indicates whether the share was deleted.",
          "type": "boolean"
        },
        "deletedTime": {
          "description": "DeletedTime: The deleted time if the share was deleted.",
          "type": "string"
        },
        "enabledProtocols": {
          "description": "EnabledProtocols: The authentication protocol that is used for the file share. Can only be specified when creating a\nshare.",
          "type": "string"
        },
        "etag": {
          "description": "Etag: Resource Etag.",
          "type": "string"
        },
        "id": {
          "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "LastModifiedTime: Returns the date and time the share was last modified.",
          "type": "string"
        },
        "leaseDuration": {
          "description": "LeaseDuration: Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.",
          "type": "string"
        },
        "leaseState": {
          "description": "LeaseState: Lease state of the share.",
          "type": "string"
        },
        "leaseStatus": {
          "description": "LeaseStatus: The lease status of the share.",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata: A name-value pair to associate with the share as metadata.",
          "type": "object"
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        },
        "remainingRetentionDays": {
          "description": "RemainingRetentionDays: Remaining retention days for share that was soft deleted.",
          "type": "integer"
        },
        "rootSquash": {
          "description": "RootSquash: The property is for NFS share only. The default is NoRootSquash.",
          "type": "string"
        },
        "shareQuota": {
          "description": "ShareQuota: The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120).\nFor Large File Shares, the maximum size is 102400.",
          "type": "integer"
        },
        "shareUsageBytes": {
          "description": "ShareUsageBytes: The approximate size of the data stored on the share. Note that this value may not include all recently\ncreated or recently resized files.",
          "type": "integer"
        },
        "signedIdentifiers": {
          "description": "SignedIdentifiers: List of stored access policies specified on the share.",
          "items": {
            "properties": {
              "accessPolicy": {
                "description": "AccessPolicy: Access policy",
                "properties": {
                  "expiryTime": {
                    "description": "ExpiryTime: Expiry time of the access policy",
                    "type": "string"
                  },
                  "permission": {
                    "description": "Permission: List of abbreviated permissions.",
                    "type": "string"
                  },
                  "startTime": {
                    "description": "StartTime: Start time of the access policy",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "id": {
                "description": "Id: An unique identifier of the stored access policy.",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "snapshotTime": {
          "description": "SnapshotTime: Creation time of share snapshot returned in the response of list shares with expand param \"snapshots\".",
          "type": "string"
        },
        "type": {
          "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "type": "string"
        },
        "version": {
          "description": "Version: The version of the share.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
