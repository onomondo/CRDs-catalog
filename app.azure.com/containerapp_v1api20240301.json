{
  "description": "Generator information:\n- Generated from: /app/resource-manager/Microsoft.App/stable/2024-03-01/ContainerApps.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/containerApps/{containerAppName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "configuration": {
          "description": "Configuration: Non versioned Container App configuration properties.",
          "properties": {
            "activeRevisionsMode": {
              "description": "ActiveRevisionsMode: ActiveRevisionsMode controls how active revisions are handled for the Container app:\n<list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time.\nRevision weights can not be used in this mode. If no value if provided, this is the default.</item></list>",
              "enum": [
                "Multiple",
                "Single"
              ],
              "type": "string"
            },
            "dapr": {
              "description": "Dapr: Dapr configuration for the Container App.",
              "properties": {
                "appId": {
                  "description": "AppId: Dapr application identifier",
                  "type": "string"
                },
                "appPort": {
                  "description": "AppPort: Tells Dapr which port your application is listening on",
                  "type": "integer"
                },
                "appProtocol": {
                  "description": "AppProtocol: Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http",
                  "enum": [
                    "grpc",
                    "http"
                  ],
                  "type": "string"
                },
                "enableApiLogging": {
                  "description": "EnableApiLogging: Enables API logging for the Dapr sidecar",
                  "type": "boolean"
                },
                "enabled": {
                  "description": "Enabled: Boolean indicating if the Dapr side car is enabled",
                  "type": "boolean"
                },
                "httpMaxRequestSize": {
                  "description": "HttpMaxRequestSize: Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big\nfiles. Default is 4 MB.",
                  "type": "integer"
                },
                "httpReadBufferSize": {
                  "description": "HttpReadBufferSize: Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is\n65KB.",
                  "type": "integer"
                },
                "logLevel": {
                  "description": "LogLevel: Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.",
                  "enum": [
                    "debug",
                    "error",
                    "info",
                    "warn"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "ingress": {
              "description": "Ingress: Ingress configurations.",
              "properties": {
                "additionalPortMappings": {
                  "description": "AdditionalPortMappings: Settings to expose additional ports on container app",
                  "items": {
                    "description": "Port mappings of container app ingress",
                    "properties": {
                      "exposedPort": {
                        "description": "ExposedPort: Specifies the exposed port for the target port. If not specified, it defaults to target port",
                        "type": "integer"
                      },
                      "external": {
                        "description": "External: Specifies whether the app port is accessible outside of the environment",
                        "type": "boolean"
                      },
                      "targetPort": {
                        "description": "TargetPort: Specifies the port user's container listens on",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "external",
                      "targetPort"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "allowInsecure": {
                  "description": "AllowInsecure: Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically\nredirected to HTTPS connections",
                  "type": "boolean"
                },
                "clientCertificateMode": {
                  "description": "ClientCertificateMode: Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate\non forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require\nindicates server requires a client certificate.",
                  "enum": [
                    "accept",
                    "ignore",
                    "require"
                  ],
                  "type": "string"
                },
                "corsPolicy": {
                  "description": "CorsPolicy: CORS policy for container app",
                  "properties": {
                    "allowCredentials": {
                      "description": "AllowCredentials: Specifies whether the resource allows credentials",
                      "type": "boolean"
                    },
                    "allowedHeaders": {
                      "description": "AllowedHeaders: Specifies the content for the access-control-allow-headers header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "allowedMethods": {
                      "description": "AllowedMethods: Specifies the content for the access-control-allow-methods header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "allowedOrigins": {
                      "description": "AllowedOrigins: Specifies the content for the access-control-allow-origins header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "exposeHeaders": {
                      "description": "ExposeHeaders: Specifies the content for the access-control-expose-headers header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "maxAge": {
                      "description": "MaxAge: Specifies the content for the access-control-max-age header",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "allowedOrigins"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "customDomains": {
                  "description": "CustomDomains: custom domain bindings for Container Apps' hostnames.",
                  "items": {
                    "description": "Custom Domain of a Container App",
                    "properties": {
                      "bindingType": {
                        "description": "BindingType: Custom Domain binding type.",
                        "enum": [
                          "Disabled",
                          "SniEnabled"
                        ],
                        "type": "string"
                      },
                      "certificateReference": {
                        "description": "CertificateReference: Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.",
                        "properties": {
                          "armId": {
                            "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                            "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                            "type": "string"
                          },
                          "group": {
                            "description": "Group is the Kubernetes group of the resource.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind is the Kubernetes kind of the resource.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name is the Kubernetes name of the resource.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "Name: Hostname.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "exposedPort": {
                  "description": "ExposedPort: Exposed Port in containers for TCP traffic from ingress",
                  "type": "integer"
                },
                "external": {
                  "description": "External: Bool indicating if app exposes an external http endpoint",
                  "type": "boolean"
                },
                "ipSecurityRestrictions": {
                  "description": "IpSecurityRestrictions: Rules to restrict incoming IP address.",
                  "items": {
                    "description": "Rule to restrict incoming IP address.",
                    "properties": {
                      "action": {
                        "description": "Action: Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny",
                        "enum": [
                          "Allow",
                          "Deny"
                        ],
                        "type": "string"
                      },
                      "description": {
                        "description": "Description: Describe the IP restriction rule that is being sent to the container-app. This is an optional field.",
                        "type": "string"
                      },
                      "ipAddressRange": {
                        "description": "IpAddressRange: CIDR notation to match incoming IP address",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name: Name for the IP restriction rule.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "action",
                      "ipAddressRange",
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "stickySessions": {
                  "description": "StickySessions: Sticky Sessions for Single Revision Mode",
                  "properties": {
                    "affinity": {
                      "description": "Affinity: Sticky Session Affinity",
                      "enum": [
                        "none",
                        "sticky"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "targetPort": {
                  "description": "TargetPort: Target Port in containers for traffic from ingress",
                  "type": "integer"
                },
                "traffic": {
                  "description": "Traffic: Traffic weights for app's revisions",
                  "items": {
                    "description": "Traffic weight assigned to a revision",
                    "properties": {
                      "label": {
                        "description": "Label: Associates a traffic label with a revision",
                        "type": "string"
                      },
                      "latestRevision": {
                        "description": "LatestRevision: Indicates that the traffic weight belongs to a latest stable revision",
                        "type": "boolean"
                      },
                      "revisionName": {
                        "description": "RevisionName: Name of a revision",
                        "type": "string"
                      },
                      "weight": {
                        "description": "Weight: Traffic weight assigned to a revision",
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "transport": {
                  "description": "Transport: Ingress transport protocol",
                  "enum": [
                    "auto",
                    "http",
                    "http2",
                    "tcp"
                  ],
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "maxInactiveRevisions": {
              "description": "MaxInactiveRevisions: Optional. Max inactive revisions a Container App can have.",
              "type": "integer"
            },
            "registries": {
              "description": "Registries: Collection of private container registry credentials for containers used by the Container app",
              "items": {
                "description": "Container App Private Registry",
                "properties": {
                  "identityReference": {
                    "description": "IdentityReference: A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned\nidentities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "passwordSecretRef": {
                    "description": "PasswordSecretRef: The name of the Secret that contains the registry login password",
                    "type": "string"
                  },
                  "server": {
                    "description": "Server: Container Registry Server",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username: Container Registry Username",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secrets": {
              "description": "Secrets: Collection of secrets used by a Container app",
              "items": {
                "description": "Secret definition.",
                "properties": {
                  "identityReference": {
                    "description": "IdentityReference: Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a\nsystem-assigned identity.",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "keyVaultUrl": {
                    "description": "KeyVaultUrl: Azure Key Vault URL pointing to the secret referenced by the container app.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Secret Name.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value: Secret Value.",
                    "properties": {
                      "key": {
                        "description": "Key is the key in the Kubernetes secret being referenced",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the name of the Kubernetes secret being referenced.\nThe secret must be in the same namespace as the resource",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "name"
                    ],
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "service": {
              "description": "Service: Container App to be a dev Container App Service",
              "properties": {
                "type": {
                  "description": "Type: Dev ContainerApp service type",
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "environmentReference": {
          "description": "EnvironmentReference: Resource ID of environment.",
          "properties": {
            "armId": {
              "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "group": {
              "description": "Group is the Kubernetes group of the resource.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the Kubernetes kind of the resource.",
              "type": "string"
            },
            "name": {
              "description": "Name is the Kubernetes name of the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "extendedLocation": {
          "description": "ExtendedLocation: The complex type of the extended location.",
          "properties": {
            "name": {
              "description": "Name: The name of the extended location.",
              "type": "string"
            },
            "type": {
              "description": "Type: The type of the extended location.",
              "enum": [
                "CustomLocation"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "identity": {
          "description": "Identity: managed identities for the Container App to interact with other Azure services without maintaining any secrets\nor credentials in code.",
          "properties": {
            "type": {
              "description": "Type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
              "enum": [
                "None",
                "SystemAssigned",
                "SystemAssigned,UserAssigned",
                "UserAssigned"
              ],
              "type": "string"
            },
            "userAssignedIdentities": {
              "items": {
                "description": "Information about the user assigned identity for the resource",
                "properties": {
                  "reference": {
                    "description": "ResourceReference represents a resource reference, either to a Kubernetes resource or directly to an Azure resource via ARMID",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "type"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "location": {
          "description": "Location: The geo-location where the resource lives",
          "type": "string"
        },
        "managedByReference": {
          "description": "ManagedByReference: The fully qualified resource ID of the resource that manages this resource. Indicates if this\nresource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource\nif it is removed from the template since it is managed by another resource.",
          "properties": {
            "armId": {
              "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "group": {
              "description": "Group is the Kubernetes group of the resource.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the Kubernetes kind of the resource.",
              "type": "string"
            },
            "name": {
              "description": "Name is the Kubernetes name of the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "managedEnvironmentReference": {
          "description": "ManagedEnvironmentReference: Deprecated. Resource ID of the Container App's environment.",
          "properties": {
            "armId": {
              "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "group": {
              "description": "Group is the Kubernetes group of the resource.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the Kubernetes kind of the resource.",
              "type": "string"
            },
            "name": {
              "description": "Name is the Kubernetes name of the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "configMaps": {
              "description": "ConfigMaps: configures where to place operator written ConfigMaps.",
              "properties": {
                "eventStreamEndpoint": {
                  "description": "EventStreamEndpoint: indicates where the EventStreamEndpoint config map should be placed. If omitted, no config map will\nbe created.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the ConfigMap being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes ConfigMap to write to.\nThe ConfigMap will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "fqdn": {
                  "description": "Fqdn: indicates where the Fqdn config map should be placed. If omitted, no config map will be created.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the ConfigMap being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes ConfigMap to write to.\nThe ConfigMap will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a resources.azure.com/ResourceGroup resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "template": {
          "description": "Template: Container App versioned application definition.",
          "properties": {
            "containers": {
              "description": "Containers: List of container definitions for the Container App.",
              "items": {
                "description": "Container App container definition",
                "properties": {
                  "args": {
                    "description": "Args: Container start command arguments.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "command": {
                    "description": "Command: Container start command.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "env": {
                    "description": "Env: Container environment variables.",
                    "items": {
                      "description": "Container App container environment variable.",
                      "properties": {
                        "name": {
                          "description": "Name: Environment variable name.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef: Name of the Container App secret from which to pull the environment variable value.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value: Non-secret environment variable value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "image": {
                    "description": "Image: Container image tag.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Custom container name.",
                    "type": "string"
                  },
                  "probes": {
                    "description": "Probes: List of probes for the container.",
                    "items": {
                      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive\ntraffic.",
                      "properties": {
                        "failureThreshold": {
                          "description": "FailureThreshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to\n3. Minimum value is 1. Maximum value is 10.",
                          "type": "integer"
                        },
                        "httpGet": {
                          "description": "HttpGet: HTTPGet specifies the http request to perform.",
                          "properties": {
                            "host": {
                              "description": "Host: Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                              "type": "string"
                            },
                            "httpHeaders": {
                              "description": "HttpHeaders: Custom headers to set in the request. HTTP allows repeated headers.",
                              "items": {
                                "properties": {
                                  "name": {
                                    "description": "Name: The header field name",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Value: The header field value",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name",
                                  "value"
                                ],
                                "type": "object",
                                "additionalProperties": false
                              },
                              "type": "array"
                            },
                            "path": {
                              "description": "Path: Path to access on the HTTP server.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an\nIANA_SVC_NAME.",
                              "type": "integer"
                            },
                            "scheme": {
                              "description": "Scheme: Scheme to use for connecting to the host. Defaults to HTTP.",
                              "enum": [
                                "HTTP",
                                "HTTPS"
                              ],
                              "type": "string"
                            }
                          },
                          "required": [
                            "port"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "initialDelaySeconds": {
                          "description": "InitialDelaySeconds: Number of seconds after the container has started before liveness probes are initiated. Minimum\nvalue is 1. Maximum value is 60.",
                          "type": "integer"
                        },
                        "periodSeconds": {
                          "description": "PeriodSeconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is\n240.",
                          "type": "integer"
                        },
                        "successThreshold": {
                          "description": "SuccessThreshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults\nto 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10.",
                          "type": "integer"
                        },
                        "tcpSocket": {
                          "description": "TcpSocket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.",
                          "properties": {
                            "host": {
                              "description": "Host: Optional: Host name to connect to, defaults to the pod IP.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an\nIANA_SVC_NAME.",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "port"
                          ],
                          "type": "object",
                          "additionalProperties": false
                        },
                        "terminationGracePeriodSeconds": {
                          "description": "TerminationGracePeriodSeconds: Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the\ntime when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for\nyour process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value\noverrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop\nimmediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling\nProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)",
                          "type": "integer"
                        },
                        "timeoutSeconds": {
                          "description": "TimeoutSeconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum\nvalue is 240.",
                          "type": "integer"
                        },
                        "type": {
                          "description": "Type: The type of probe.",
                          "enum": [
                            "Liveness",
                            "Readiness",
                            "Startup"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "resources": {
                    "description": "Resources: Container resource requirements.",
                    "properties": {
                      "cpu": {
                        "description": "Cpu: Required CPU in cores, e.g. 0.5",
                        "type": "number"
                      },
                      "memory": {
                        "description": "Memory: Required memory, e.g. \"250Mb\"",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "volumeMounts": {
                    "description": "VolumeMounts: Container volume mounts.",
                    "items": {
                      "description": "Volume mount for the Container App.",
                      "properties": {
                        "mountPath": {
                          "description": "MountPath: Path within the container at which the volume should be mounted.Must not contain ':'.",
                          "type": "string"
                        },
                        "subPath": {
                          "description": "SubPath: Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "volumeName": {
                          "description": "VolumeName: This must match the Name of a Volume.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "initContainers": {
              "description": "InitContainers: List of specialized containers that run before app containers.",
              "items": {
                "description": "Container App base container definition.",
                "properties": {
                  "args": {
                    "description": "Args: Container start command arguments.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "command": {
                    "description": "Command: Container start command.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "env": {
                    "description": "Env: Container environment variables.",
                    "items": {
                      "description": "Container App container environment variable.",
                      "properties": {
                        "name": {
                          "description": "Name: Environment variable name.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef: Name of the Container App secret from which to pull the environment variable value.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value: Non-secret environment variable value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "image": {
                    "description": "Image: Container image tag.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Custom container name.",
                    "type": "string"
                  },
                  "resources": {
                    "description": "Resources: Container resource requirements.",
                    "properties": {
                      "cpu": {
                        "description": "Cpu: Required CPU in cores, e.g. 0.5",
                        "type": "number"
                      },
                      "memory": {
                        "description": "Memory: Required memory, e.g. \"250Mb\"",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "volumeMounts": {
                    "description": "VolumeMounts: Container volume mounts.",
                    "items": {
                      "description": "Volume mount for the Container App.",
                      "properties": {
                        "mountPath": {
                          "description": "MountPath: Path within the container at which the volume should be mounted.Must not contain ':'.",
                          "type": "string"
                        },
                        "subPath": {
                          "description": "SubPath: Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "volumeName": {
                          "description": "VolumeName: This must match the Name of a Volume.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "revisionSuffix": {
              "description": "RevisionSuffix: User friendly suffix that is appended to the revision name",
              "type": "string"
            },
            "scale": {
              "description": "Scale: Scaling properties for the Container App.",
              "properties": {
                "maxReplicas": {
                  "description": "MaxReplicas: Optional. Maximum number of container replicas. Defaults to 10 if not set.",
                  "type": "integer"
                },
                "minReplicas": {
                  "description": "MinReplicas: Optional. Minimum number of container replicas.",
                  "type": "integer"
                },
                "rules": {
                  "description": "Rules: Scaling rules.",
                  "items": {
                    "description": "Container App container scaling rule.",
                    "properties": {
                      "azureQueue": {
                        "description": "AzureQueue: Azure Queue based scaling.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the queue scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "queueLength": {
                            "description": "QueueLength: Queue length.",
                            "type": "integer"
                          },
                          "queueName": {
                            "description": "QueueName: Queue name.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "custom": {
                        "description": "Custom: Custom scale rule.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the custom scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Metadata: Metadata properties to describe custom scale rule.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Type: Type of the custom scale rule\neg: azure-servicebus, redis etc.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "http": {
                        "description": "Http: HTTP requests based scaling.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the custom scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Metadata: Metadata properties to describe http scale rule.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "Name: Scale Rule Name",
                        "type": "string"
                      },
                      "tcp": {
                        "description": "Tcp: Tcp requests based scaling.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the tcp scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Metadata: Metadata properties to describe tcp scale rule.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serviceBinds": {
              "description": "ServiceBinds: List of container app services bound to the app",
              "items": {
                "description": "Configuration to bind a ContainerApp to a dev ContainerApp Service",
                "properties": {
                  "name": {
                    "description": "Name: Name of the service bind",
                    "type": "string"
                  },
                  "serviceReference": {
                    "description": "ServiceReference: Resource id of the target service",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "terminationGracePeriodSeconds": {
              "description": "TerminationGracePeriodSeconds: Optional duration in seconds the Container App Instance needs to terminate gracefully.\nValue must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to\nshut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected\ncleanup time for your process. Defaults to 30 seconds.",
              "type": "integer"
            },
            "volumes": {
              "description": "Volumes: List of volume definitions for the Container App.",
              "items": {
                "description": "Volume definitions for the Container App.",
                "properties": {
                  "mountOptions": {
                    "description": "MountOptions: Mount options used while mounting the AzureFile. Must be a comma-separated string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Volume name.",
                    "type": "string"
                  },
                  "secrets": {
                    "description": "Secrets: List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to\nvolume.",
                    "items": {
                      "description": "Secret to be added to volume.",
                      "properties": {
                        "path": {
                          "description": "Path: Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef: Name of the Container App secret from which to pull the secret value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "storageName": {
                    "description": "StorageName: Name of storage resource. No need to provide for EmptyDir and Secret.",
                    "type": "string"
                  },
                  "storageType": {
                    "description": "StorageType: Storage type for the volume. If not provided, use EmptyDir.",
                    "enum": [
                      "AzureFile",
                      "EmptyDir",
                      "Secret"
                    ],
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "workloadProfileName": {
          "description": "WorkloadProfileName: Workload profile name to pin for container app execution.",
          "type": "string"
        }
      },
      "required": [
        "location",
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "Container App.",
      "properties": {
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "configuration": {
          "description": "Configuration: Non versioned Container App configuration properties.",
          "properties": {
            "activeRevisionsMode": {
              "description": "ActiveRevisionsMode: ActiveRevisionsMode controls how active revisions are handled for the Container app:\n<list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time.\nRevision weights can not be used in this mode. If no value if provided, this is the default.</item></list>",
              "type": "string"
            },
            "dapr": {
              "description": "Dapr: Dapr configuration for the Container App.",
              "properties": {
                "appId": {
                  "description": "AppId: Dapr application identifier",
                  "type": "string"
                },
                "appPort": {
                  "description": "AppPort: Tells Dapr which port your application is listening on",
                  "type": "integer"
                },
                "appProtocol": {
                  "description": "AppProtocol: Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http",
                  "type": "string"
                },
                "enableApiLogging": {
                  "description": "EnableApiLogging: Enables API logging for the Dapr sidecar",
                  "type": "boolean"
                },
                "enabled": {
                  "description": "Enabled: Boolean indicating if the Dapr side car is enabled",
                  "type": "boolean"
                },
                "httpMaxRequestSize": {
                  "description": "HttpMaxRequestSize: Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big\nfiles. Default is 4 MB.",
                  "type": "integer"
                },
                "httpReadBufferSize": {
                  "description": "HttpReadBufferSize: Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is\n65KB.",
                  "type": "integer"
                },
                "logLevel": {
                  "description": "LogLevel: Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "ingress": {
              "description": "Ingress: Ingress configurations.",
              "properties": {
                "additionalPortMappings": {
                  "description": "AdditionalPortMappings: Settings to expose additional ports on container app",
                  "items": {
                    "description": "Port mappings of container app ingress",
                    "properties": {
                      "exposedPort": {
                        "description": "ExposedPort: Specifies the exposed port for the target port. If not specified, it defaults to target port",
                        "type": "integer"
                      },
                      "external": {
                        "description": "External: Specifies whether the app port is accessible outside of the environment",
                        "type": "boolean"
                      },
                      "targetPort": {
                        "description": "TargetPort: Specifies the port user's container listens on",
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "allowInsecure": {
                  "description": "AllowInsecure: Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically\nredirected to HTTPS connections",
                  "type": "boolean"
                },
                "clientCertificateMode": {
                  "description": "ClientCertificateMode: Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate\non forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require\nindicates server requires a client certificate.",
                  "type": "string"
                },
                "corsPolicy": {
                  "description": "CorsPolicy: CORS policy for container app",
                  "properties": {
                    "allowCredentials": {
                      "description": "AllowCredentials: Specifies whether the resource allows credentials",
                      "type": "boolean"
                    },
                    "allowedHeaders": {
                      "description": "AllowedHeaders: Specifies the content for the access-control-allow-headers header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "allowedMethods": {
                      "description": "AllowedMethods: Specifies the content for the access-control-allow-methods header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "allowedOrigins": {
                      "description": "AllowedOrigins: Specifies the content for the access-control-allow-origins header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "exposeHeaders": {
                      "description": "ExposeHeaders: Specifies the content for the access-control-expose-headers header",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "maxAge": {
                      "description": "MaxAge: Specifies the content for the access-control-max-age header",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "customDomains": {
                  "description": "CustomDomains: custom domain bindings for Container Apps' hostnames.",
                  "items": {
                    "description": "Custom Domain of a Container App",
                    "properties": {
                      "bindingType": {
                        "description": "BindingType: Custom Domain binding type.",
                        "type": "string"
                      },
                      "certificateId": {
                        "description": "CertificateId: Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name: Hostname.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "exposedPort": {
                  "description": "ExposedPort: Exposed Port in containers for TCP traffic from ingress",
                  "type": "integer"
                },
                "external": {
                  "description": "External: Bool indicating if app exposes an external http endpoint",
                  "type": "boolean"
                },
                "fqdn": {
                  "description": "Fqdn: Hostname.",
                  "type": "string"
                },
                "ipSecurityRestrictions": {
                  "description": "IpSecurityRestrictions: Rules to restrict incoming IP address.",
                  "items": {
                    "description": "Rule to restrict incoming IP address.",
                    "properties": {
                      "action": {
                        "description": "Action: Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny",
                        "type": "string"
                      },
                      "description": {
                        "description": "Description: Describe the IP restriction rule that is being sent to the container-app. This is an optional field.",
                        "type": "string"
                      },
                      "ipAddressRange": {
                        "description": "IpAddressRange: CIDR notation to match incoming IP address",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name: Name for the IP restriction rule.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "stickySessions": {
                  "description": "StickySessions: Sticky Sessions for Single Revision Mode",
                  "properties": {
                    "affinity": {
                      "description": "Affinity: Sticky Session Affinity",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "targetPort": {
                  "description": "TargetPort: Target Port in containers for traffic from ingress",
                  "type": "integer"
                },
                "traffic": {
                  "description": "Traffic: Traffic weights for app's revisions",
                  "items": {
                    "description": "Traffic weight assigned to a revision",
                    "properties": {
                      "label": {
                        "description": "Label: Associates a traffic label with a revision",
                        "type": "string"
                      },
                      "latestRevision": {
                        "description": "LatestRevision: Indicates that the traffic weight belongs to a latest stable revision",
                        "type": "boolean"
                      },
                      "revisionName": {
                        "description": "RevisionName: Name of a revision",
                        "type": "string"
                      },
                      "weight": {
                        "description": "Weight: Traffic weight assigned to a revision",
                        "type": "integer"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "transport": {
                  "description": "Transport: Ingress transport protocol",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "maxInactiveRevisions": {
              "description": "MaxInactiveRevisions: Optional. Max inactive revisions a Container App can have.",
              "type": "integer"
            },
            "registries": {
              "description": "Registries: Collection of private container registry credentials for containers used by the Container app",
              "items": {
                "description": "Container App Private Registry",
                "properties": {
                  "identity": {
                    "description": "Identity: A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the\nfull user-assigned identity Resource ID. For system-assigned identities, use 'system'",
                    "type": "string"
                  },
                  "passwordSecretRef": {
                    "description": "PasswordSecretRef: The name of the Secret that contains the registry login password",
                    "type": "string"
                  },
                  "server": {
                    "description": "Server: Container Registry Server",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username: Container Registry Username",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secrets": {
              "description": "Secrets: Collection of secrets used by a Container app",
              "items": {
                "description": "Secret definition.",
                "properties": {
                  "identity": {
                    "description": "Identity: Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned\nidentity.",
                    "type": "string"
                  },
                  "keyVaultUrl": {
                    "description": "KeyVaultUrl: Azure Key Vault URL pointing to the secret referenced by the container app.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Secret Name.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "service": {
              "description": "Service: Container App to be a dev Container App Service",
              "properties": {
                "type": {
                  "description": "Type: Dev ContainerApp service type",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "customDomainVerificationId": {
          "description": "CustomDomainVerificationId: Id used to verify domain name ownership",
          "type": "string"
        },
        "environmentId": {
          "description": "EnvironmentId: Resource ID of environment.",
          "type": "string"
        },
        "eventStreamEndpoint": {
          "description": "EventStreamEndpoint: The endpoint of the eventstream of the container app.",
          "type": "string"
        },
        "extendedLocation": {
          "description": "ExtendedLocation: The complex type of the extended location.",
          "properties": {
            "name": {
              "description": "Name: The name of the extended location.",
              "type": "string"
            },
            "type": {
              "description": "Type: The type of the extended location.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "id": {
          "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "type": "string"
        },
        "identity": {
          "description": "Identity: managed identities for the Container App to interact with other Azure services without maintaining any secrets\nor credentials in code.",
          "properties": {
            "principalId": {
              "description": "PrincipalId: The service principal ID of the system assigned identity. This property will only be provided for a system\nassigned identity.",
              "type": "string"
            },
            "tenantId": {
              "description": "TenantId: The tenant ID of the system assigned identity. This property will only be provided for a system assigned\nidentity.",
              "type": "string"
            },
            "type": {
              "description": "Type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
              "type": "string"
            },
            "userAssignedIdentities": {
              "additionalProperties": {
                "description": "User assigned identity properties",
                "properties": {
                  "clientId": {
                    "description": "ClientId: The client ID of the assigned identity.",
                    "type": "string"
                  },
                  "principalId": {
                    "description": "PrincipalId: The principal ID of the assigned identity.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "latestReadyRevisionName": {
          "description": "LatestReadyRevisionName: Name of the latest ready revision of the Container App.",
          "type": "string"
        },
        "latestRevisionFqdn": {
          "description": "LatestRevisionFqdn: Fully Qualified Domain Name of the latest revision of the Container App.",
          "type": "string"
        },
        "latestRevisionName": {
          "description": "LatestRevisionName: Name of the latest revision of the Container App.",
          "type": "string"
        },
        "location": {
          "description": "Location: The geo-location where the resource lives",
          "type": "string"
        },
        "managedBy": {
          "description": "ManagedBy: The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is\nmanaged by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is\nremoved from the template since it is managed by another resource.",
          "type": "string"
        },
        "managedEnvironmentId": {
          "description": "ManagedEnvironmentId: Deprecated. Resource ID of the Container App's environment.",
          "type": "string"
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        },
        "outboundIpAddresses": {
          "description": "OutboundIpAddresses: Outbound IP Addresses for container app.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "ProvisioningState: Provisioning state of the Container App.",
          "type": "string"
        },
        "systemData": {
          "description": "SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "properties": {
            "createdAt": {
              "description": "CreatedAt: The timestamp of resource creation (UTC).",
              "type": "string"
            },
            "createdBy": {
              "description": "CreatedBy: The identity that created the resource.",
              "type": "string"
            },
            "createdByType": {
              "description": "CreatedByType: The type of identity that created the resource.",
              "type": "string"
            },
            "lastModifiedAt": {
              "description": "LastModifiedAt: The timestamp of resource last modification (UTC)",
              "type": "string"
            },
            "lastModifiedBy": {
              "description": "LastModifiedBy: The identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedByType": {
              "description": "LastModifiedByType: The type of identity that last modified the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "template": {
          "description": "Template: Container App versioned application definition.",
          "properties": {
            "containers": {
              "description": "Containers: List of container definitions for the Container App.",
              "items": {
                "description": "Container App container definition",
                "properties": {
                  "args": {
                    "description": "Args: Container start command arguments.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "command": {
                    "description": "Command: Container start command.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "env": {
                    "description": "Env: Container environment variables.",
                    "items": {
                      "description": "Container App container environment variable.",
                      "properties": {
                        "name": {
                          "description": "Name: Environment variable name.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef: Name of the Container App secret from which to pull the environment variable value.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value: Non-secret environment variable value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "image": {
                    "description": "Image: Container image tag.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Custom container name.",
                    "type": "string"
                  },
                  "probes": {
                    "description": "Probes: List of probes for the container.",
                    "items": {
                      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive\ntraffic.",
                      "properties": {
                        "failureThreshold": {
                          "description": "FailureThreshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to\n3. Minimum value is 1. Maximum value is 10.",
                          "type": "integer"
                        },
                        "httpGet": {
                          "description": "HttpGet: HTTPGet specifies the http request to perform.",
                          "properties": {
                            "host": {
                              "description": "Host: Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                              "type": "string"
                            },
                            "httpHeaders": {
                              "description": "HttpHeaders: Custom headers to set in the request. HTTP allows repeated headers.",
                              "items": {
                                "properties": {
                                  "name": {
                                    "description": "Name: The header field name",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Value: The header field value",
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "additionalProperties": false
                              },
                              "type": "array"
                            },
                            "path": {
                              "description": "Path: Path to access on the HTTP server.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an\nIANA_SVC_NAME.",
                              "type": "integer"
                            },
                            "scheme": {
                              "description": "Scheme: Scheme to use for connecting to the host. Defaults to HTTP.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "initialDelaySeconds": {
                          "description": "InitialDelaySeconds: Number of seconds after the container has started before liveness probes are initiated. Minimum\nvalue is 1. Maximum value is 60.",
                          "type": "integer"
                        },
                        "periodSeconds": {
                          "description": "PeriodSeconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is\n240.",
                          "type": "integer"
                        },
                        "successThreshold": {
                          "description": "SuccessThreshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults\nto 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10.",
                          "type": "integer"
                        },
                        "tcpSocket": {
                          "description": "TcpSocket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.",
                          "properties": {
                            "host": {
                              "description": "Host: Optional: Host name to connect to, defaults to the pod IP.",
                              "type": "string"
                            },
                            "port": {
                              "description": "Port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an\nIANA_SVC_NAME.",
                              "type": "integer"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "terminationGracePeriodSeconds": {
                          "description": "TerminationGracePeriodSeconds: Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the\ntime when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for\nyour process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value\noverrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop\nimmediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling\nProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)",
                          "type": "integer"
                        },
                        "timeoutSeconds": {
                          "description": "TimeoutSeconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum\nvalue is 240.",
                          "type": "integer"
                        },
                        "type": {
                          "description": "Type: The type of probe.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "resources": {
                    "description": "Resources: Container resource requirements.",
                    "properties": {
                      "cpu": {
                        "description": "Cpu: Required CPU in cores, e.g. 0.5",
                        "type": "number"
                      },
                      "ephemeralStorage": {
                        "description": "EphemeralStorage: Ephemeral Storage, e.g. \"1Gi\"",
                        "type": "string"
                      },
                      "memory": {
                        "description": "Memory: Required memory, e.g. \"250Mb\"",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "volumeMounts": {
                    "description": "VolumeMounts: Container volume mounts.",
                    "items": {
                      "description": "Volume mount for the Container App.",
                      "properties": {
                        "mountPath": {
                          "description": "MountPath: Path within the container at which the volume should be mounted.Must not contain ':'.",
                          "type": "string"
                        },
                        "subPath": {
                          "description": "SubPath: Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "volumeName": {
                          "description": "VolumeName: This must match the Name of a Volume.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "initContainers": {
              "description": "InitContainers: List of specialized containers that run before app containers.",
              "items": {
                "description": "Container App base container definition.",
                "properties": {
                  "args": {
                    "description": "Args: Container start command arguments.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "command": {
                    "description": "Command: Container start command.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "env": {
                    "description": "Env: Container environment variables.",
                    "items": {
                      "description": "Container App container environment variable.",
                      "properties": {
                        "name": {
                          "description": "Name: Environment variable name.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef: Name of the Container App secret from which to pull the environment variable value.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Value: Non-secret environment variable value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "image": {
                    "description": "Image: Container image tag.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Custom container name.",
                    "type": "string"
                  },
                  "resources": {
                    "description": "Resources: Container resource requirements.",
                    "properties": {
                      "cpu": {
                        "description": "Cpu: Required CPU in cores, e.g. 0.5",
                        "type": "number"
                      },
                      "ephemeralStorage": {
                        "description": "EphemeralStorage: Ephemeral Storage, e.g. \"1Gi\"",
                        "type": "string"
                      },
                      "memory": {
                        "description": "Memory: Required memory, e.g. \"250Mb\"",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "volumeMounts": {
                    "description": "VolumeMounts: Container volume mounts.",
                    "items": {
                      "description": "Volume mount for the Container App.",
                      "properties": {
                        "mountPath": {
                          "description": "MountPath: Path within the container at which the volume should be mounted.Must not contain ':'.",
                          "type": "string"
                        },
                        "subPath": {
                          "description": "SubPath: Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                          "type": "string"
                        },
                        "volumeName": {
                          "description": "VolumeName: This must match the Name of a Volume.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "revisionSuffix": {
              "description": "RevisionSuffix: User friendly suffix that is appended to the revision name",
              "type": "string"
            },
            "scale": {
              "description": "Scale: Scaling properties for the Container App.",
              "properties": {
                "maxReplicas": {
                  "description": "MaxReplicas: Optional. Maximum number of container replicas. Defaults to 10 if not set.",
                  "type": "integer"
                },
                "minReplicas": {
                  "description": "MinReplicas: Optional. Minimum number of container replicas.",
                  "type": "integer"
                },
                "rules": {
                  "description": "Rules: Scaling rules.",
                  "items": {
                    "description": "Container App container scaling rule.",
                    "properties": {
                      "azureQueue": {
                        "description": "AzureQueue: Azure Queue based scaling.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the queue scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "queueLength": {
                            "description": "QueueLength: Queue length.",
                            "type": "integer"
                          },
                          "queueName": {
                            "description": "QueueName: Queue name.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "custom": {
                        "description": "Custom: Custom scale rule.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the custom scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Metadata: Metadata properties to describe custom scale rule.",
                            "type": "object"
                          },
                          "type": {
                            "description": "Type: Type of the custom scale rule\neg: azure-servicebus, redis etc.",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "http": {
                        "description": "Http: HTTP requests based scaling.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the custom scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Metadata: Metadata properties to describe http scale rule.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "Name: Scale Rule Name",
                        "type": "string"
                      },
                      "tcp": {
                        "description": "Tcp: Tcp requests based scaling.",
                        "properties": {
                          "auth": {
                            "description": "Auth: Authentication secrets for the tcp scale rule.",
                            "items": {
                              "description": "Auth Secrets for Scale Rule",
                              "properties": {
                                "secretRef": {
                                  "description": "SecretRef: Name of the secret from which to pull the auth params.",
                                  "type": "string"
                                },
                                "triggerParameter": {
                                  "description": "TriggerParameter: Trigger Parameter that uses the secret",
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "additionalProperties": false
                            },
                            "type": "array"
                          },
                          "metadata": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Metadata: Metadata properties to describe tcp scale rule.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "serviceBinds": {
              "description": "ServiceBinds: List of container app services bound to the app",
              "items": {
                "description": "Configuration to bind a ContainerApp to a dev ContainerApp Service",
                "properties": {
                  "name": {
                    "description": "Name: Name of the service bind",
                    "type": "string"
                  },
                  "serviceId": {
                    "description": "ServiceId: Resource id of the target service",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "terminationGracePeriodSeconds": {
              "description": "TerminationGracePeriodSeconds: Optional duration in seconds the Container App Instance needs to terminate gracefully.\nValue must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to\nshut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected\ncleanup time for your process. Defaults to 30 seconds.",
              "type": "integer"
            },
            "volumes": {
              "description": "Volumes: List of volume definitions for the Container App.",
              "items": {
                "description": "Volume definitions for the Container App.",
                "properties": {
                  "mountOptions": {
                    "description": "MountOptions: Mount options used while mounting the AzureFile. Must be a comma-separated string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name: Volume name.",
                    "type": "string"
                  },
                  "secrets": {
                    "description": "Secrets: List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to\nvolume.",
                    "items": {
                      "description": "Secret to be added to volume.",
                      "properties": {
                        "path": {
                          "description": "Path: Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef.",
                          "type": "string"
                        },
                        "secretRef": {
                          "description": "SecretRef: Name of the Container App secret from which to pull the secret value.",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "storageName": {
                    "description": "StorageName: Name of storage resource. No need to provide for EmptyDir and Secret.",
                    "type": "string"
                  },
                  "storageType": {
                    "description": "StorageType: Storage type for the volume. If not provided, use EmptyDir.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "type": {
          "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "type": "string"
        },
        "workloadProfileName": {
          "description": "WorkloadProfileName: Workload profile name to pin for container app execution.",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
