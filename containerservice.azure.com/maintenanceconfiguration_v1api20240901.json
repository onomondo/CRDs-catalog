{
  "description": "Generator information:\n- Generated from: /containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-09-01/managedClusters.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "maintenanceWindow": {
          "description": "MaintenanceWindow: Maintenance window for the maintenance configuration.",
          "properties": {
            "durationHours": {
              "description": "DurationHours: Length of maintenance window range from 4 to 24 hours.",
              "maximum": 24,
              "minimum": 4,
              "type": "integer"
            },
            "notAllowedDates": {
              "description": "NotAllowedDates: Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with\n'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22\n22:00' to '2023-01-03 22:00' in UTC time.",
              "items": {
                "description": "For example, between '2022-12-23' and '2023-01-05'.",
                "properties": {
                  "end": {
                    "description": "End: The end date of the date span.",
                    "type": "string"
                  },
                  "start": {
                    "description": "Start: The start date of the date span.",
                    "type": "string"
                  }
                },
                "required": [
                  "end",
                  "start"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "schedule": {
              "description": "Schedule: Recurrence schedule for the maintenance window.",
              "properties": {
                "absoluteMonthly": {
                  "description": "AbsoluteMonthly: For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.",
                  "properties": {
                    "dayOfMonth": {
                      "description": "DayOfMonth: The date of the month.",
                      "maximum": 31,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "intervalMonths": {
                      "description": "IntervalMonths: Specifies the number of months between each set of occurrences.",
                      "maximum": 6,
                      "minimum": 1,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "dayOfMonth",
                    "intervalMonths"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "daily": {
                  "description": "Daily: For schedules like: 'recur every day' or 'recur every 3 days'.",
                  "properties": {
                    "intervalDays": {
                      "description": "IntervalDays: Specifies the number of days between each set of occurrences.",
                      "maximum": 7,
                      "minimum": 1,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "intervalDays"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "relativeMonthly": {
                  "description": "RelativeMonthly: For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.",
                  "properties": {
                    "dayOfWeek": {
                      "description": "DayOfWeek: Specifies on which day of the week the maintenance occurs.",
                      "enum": [
                        "Friday",
                        "Monday",
                        "Saturday",
                        "Sunday",
                        "Thursday",
                        "Tuesday",
                        "Wednesday"
                      ],
                      "type": "string"
                    },
                    "intervalMonths": {
                      "description": "IntervalMonths: Specifies the number of months between each set of occurrences.",
                      "maximum": 6,
                      "minimum": 1,
                      "type": "integer"
                    },
                    "weekIndex": {
                      "description": "WeekIndex: Specifies on which week of the month the dayOfWeek applies.",
                      "enum": [
                        "First",
                        "Fourth",
                        "Last",
                        "Second",
                        "Third"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "dayOfWeek",
                    "intervalMonths",
                    "weekIndex"
                  ],
                  "type": "object",
                  "additionalProperties": false
                },
                "weekly": {
                  "description": "Weekly: For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.",
                  "properties": {
                    "dayOfWeek": {
                      "description": "DayOfWeek: Specifies on which day of the week the maintenance occurs.",
                      "enum": [
                        "Friday",
                        "Monday",
                        "Saturday",
                        "Sunday",
                        "Thursday",
                        "Tuesday",
                        "Wednesday"
                      ],
                      "type": "string"
                    },
                    "intervalWeeks": {
                      "description": "IntervalWeeks: Specifies the number of weeks between each set of occurrences.",
                      "maximum": 4,
                      "minimum": 1,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "dayOfWeek",
                    "intervalWeeks"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "startDate": {
              "description": "StartDate: The date the maintenance window activates. If the current date is before this date, the maintenance window is\ninactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.",
              "type": "string"
            },
            "startTime": {
              "description": "StartTime: The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to\nthis field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.",
              "pattern": "^\\d{2}:\\d{2}$",
              "type": "string"
            },
            "utcOffset": {
              "description": "UtcOffset: The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the\ndefault is '+00:00'.",
              "pattern": "^(-|\\+)[0-9]{2}:[0-9]{2}$",
              "type": "string"
            }
          },
          "required": [
            "durationHours",
            "schedule",
            "startTime"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "notAllowedTime": {
          "description": "NotAllowedTime: Time slots on which upgrade is not allowed.",
          "items": {
            "description": "For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.",
            "properties": {
              "end": {
                "description": "End: The end of a time span",
                "type": "string"
              },
              "start": {
                "description": "Start: The start of a time span",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a containerservice.azure.com/ManagedCluster resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "timeInWeek": {
          "description": "TimeInWeek: If two array entries specify the same day of the week, the applied configuration is the union of times in\nboth entries.",
          "items": {
            "description": "Time in a week.",
            "properties": {
              "day": {
                "description": "Day: The day of the week.",
                "enum": [
                  "Friday",
                  "Monday",
                  "Saturday",
                  "Sunday",
                  "Thursday",
                  "Tuesday",
                  "Wednesday"
                ],
                "type": "string"
              },
              "hourSlots": {
                "description": "HourSlots: Each integer hour represents a time range beginning at 0m after the hour ending at the next hour\n(non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC\ntime range.",
                "items": {
                  "maximum": 23,
                  "minimum": 0,
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "required": [
        "owner"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "id": {
          "description": "Id: Resource ID.",
          "type": "string"
        },
        "maintenanceWindow": {
          "description": "MaintenanceWindow: Maintenance window for the maintenance configuration.",
          "properties": {
            "durationHours": {
              "description": "DurationHours: Length of maintenance window range from 4 to 24 hours.",
              "type": "integer"
            },
            "notAllowedDates": {
              "description": "NotAllowedDates: Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with\n'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22\n22:00' to '2023-01-03 22:00' in UTC time.",
              "items": {
                "description": "For example, between '2022-12-23' and '2023-01-05'.",
                "properties": {
                  "end": {
                    "description": "End: The end date of the date span.",
                    "type": "string"
                  },
                  "start": {
                    "description": "Start: The start date of the date span.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "schedule": {
              "description": "Schedule: Recurrence schedule for the maintenance window.",
              "properties": {
                "absoluteMonthly": {
                  "description": "AbsoluteMonthly: For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.",
                  "properties": {
                    "dayOfMonth": {
                      "description": "DayOfMonth: The date of the month.",
                      "type": "integer"
                    },
                    "intervalMonths": {
                      "description": "IntervalMonths: Specifies the number of months between each set of occurrences.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "daily": {
                  "description": "Daily: For schedules like: 'recur every day' or 'recur every 3 days'.",
                  "properties": {
                    "intervalDays": {
                      "description": "IntervalDays: Specifies the number of days between each set of occurrences.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "relativeMonthly": {
                  "description": "RelativeMonthly: For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.",
                  "properties": {
                    "dayOfWeek": {
                      "description": "DayOfWeek: Specifies on which day of the week the maintenance occurs.",
                      "type": "string"
                    },
                    "intervalMonths": {
                      "description": "IntervalMonths: Specifies the number of months between each set of occurrences.",
                      "type": "integer"
                    },
                    "weekIndex": {
                      "description": "WeekIndex: Specifies on which week of the month the dayOfWeek applies.",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "weekly": {
                  "description": "Weekly: For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.",
                  "properties": {
                    "dayOfWeek": {
                      "description": "DayOfWeek: Specifies on which day of the week the maintenance occurs.",
                      "type": "string"
                    },
                    "intervalWeeks": {
                      "description": "IntervalWeeks: Specifies the number of weeks between each set of occurrences.",
                      "type": "integer"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "startDate": {
              "description": "StartDate: The date the maintenance window activates. If the current date is before this date, the maintenance window is\ninactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.",
              "type": "string"
            },
            "startTime": {
              "description": "StartTime: The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to\nthis field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.",
              "type": "string"
            },
            "utcOffset": {
              "description": "UtcOffset: The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the\ndefault is '+00:00'.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "name": {
          "description": "Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "notAllowedTime": {
          "description": "NotAllowedTime: Time slots on which upgrade is not allowed.",
          "items": {
            "description": "For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.",
            "properties": {
              "end": {
                "description": "End: The end of a time span",
                "type": "string"
              },
              "start": {
                "description": "Start: The start of a time span",
                "type": "string"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "systemData": {
          "description": "SystemData: The system metadata relating to this resource.",
          "properties": {
            "createdAt": {
              "description": "CreatedAt: The timestamp of resource creation (UTC).",
              "type": "string"
            },
            "createdBy": {
              "description": "CreatedBy: The identity that created the resource.",
              "type": "string"
            },
            "createdByType": {
              "description": "CreatedByType: The type of identity that created the resource.",
              "type": "string"
            },
            "lastModifiedAt": {
              "description": "LastModifiedAt: The timestamp of resource last modification (UTC)",
              "type": "string"
            },
            "lastModifiedBy": {
              "description": "LastModifiedBy: The identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedByType": {
              "description": "LastModifiedByType: The type of identity that last modified the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "timeInWeek": {
          "description": "TimeInWeek: If two array entries specify the same day of the week, the applied configuration is the union of times in\nboth entries.",
          "items": {
            "description": "Time in a week.",
            "properties": {
              "day": {
                "description": "Day: The day of the week.",
                "type": "string"
              },
              "hourSlots": {
                "description": "HourSlots: Each integer hour represents a time range beginning at 0m after the hour ending at the next hour\n(non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC\ntime range.",
                "items": {
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "type": {
          "description": "Type: Resource type",
          "type": "string"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
