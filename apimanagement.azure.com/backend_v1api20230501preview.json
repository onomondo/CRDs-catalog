{
  "description": "Generator information:\n- Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/preview/2023-05-01-preview/apimbackends.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "maxLength": 80,
          "minLength": 1,
          "type": "string"
        },
        "circuitBreaker": {
          "description": "CircuitBreaker: Backend Circuit Breaker Configuration",
          "properties": {
            "rules": {
              "description": "Rules: The rules for tripping the backend.",
              "items": {
                "description": "Rule configuration to trip the backend.",
                "properties": {
                  "failureCondition": {
                    "description": "FailureCondition: The conditions for tripping the circuit breaker.",
                    "properties": {
                      "count": {
                        "description": "Count: The threshold for opening the circuit.",
                        "type": "integer"
                      },
                      "errorReasons": {
                        "description": "ErrorReasons: The error reasons which are considered as failure.",
                        "items": {
                          "maxLength": 200,
                          "type": "string"
                        },
                        "maxItems": 10,
                        "type": "array"
                      },
                      "interval": {
                        "description": "Interval: The interval during which the failures are counted.",
                        "type": "string"
                      },
                      "percentage": {
                        "description": "Percentage: The threshold for opening the circuit.",
                        "type": "integer"
                      },
                      "statusCodeRanges": {
                        "description": "StatusCodeRanges: The status code ranges which are considered as failure.",
                        "items": {
                          "description": "The failure http status code range",
                          "properties": {
                            "max": {
                              "description": "Max: The maximum http status code.",
                              "maximum": 599,
                              "minimum": 200,
                              "type": "integer"
                            },
                            "min": {
                              "description": "Min: The minimum http status code.",
                              "maximum": 599,
                              "minimum": 200,
                              "type": "integer"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "maxItems": 10,
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "Name: The rule name.",
                    "type": "string"
                  },
                  "tripDuration": {
                    "description": "TripDuration: The duration for which the circuit will be tripped.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "maxItems": 15,
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "credentials": {
          "description": "Credentials: Backend Credentials Contract Properties",
          "properties": {
            "authorization": {
              "description": "Authorization: Authorization header authentication",
              "properties": {
                "parameter": {
                  "description": "Parameter: Authentication Parameter value.",
                  "maxLength": 300,
                  "minLength": 1,
                  "type": "string"
                },
                "scheme": {
                  "description": "Scheme: Authentication Scheme name.",
                  "maxLength": 100,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "parameter",
                "scheme"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "certificate": {
              "description": "Certificate: List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.",
              "items": {
                "type": "string"
              },
              "maxItems": 32,
              "type": "array"
            },
            "certificateIds": {
              "description": "CertificateIds: List of Client Certificate Ids.",
              "items": {
                "type": "string"
              },
              "maxItems": 32,
              "type": "array"
            },
            "header": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "description": "Header: Header Parameter description.",
              "type": "object"
            },
            "query": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "description": "Query: Query Parameter description.",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "description": {
          "description": "Description: Backend Description.",
          "maxLength": 2000,
          "minLength": 1,
          "type": "string"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a apimanagement.azure.com/Service resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "pool": {
          "description": "Pool: Backend pool information",
          "properties": {
            "services": {
              "description": "Services: The list of backend entities belonging to a pool.",
              "items": {
                "description": "Backend pool service information",
                "properties": {
                  "reference": {
                    "description": "Reference: The unique ARM id of the backend entity. The ARM id should refer to an already existing backend entity.",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "required": [
                  "reference"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "minItems": 1,
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "properties": {
          "description": "Properties: Backend Properties contract",
          "properties": {
            "serviceFabricCluster": {
              "description": "ServiceFabricCluster: Backend Service Fabric Cluster Properties",
              "properties": {
                "clientCertificateId": {
                  "description": "ClientCertificateId: The client certificate id for the management endpoint.",
                  "type": "string"
                },
                "clientCertificatethumbprint": {
                  "description": "ClientCertificatethumbprint: The client certificate thumbprint for the management endpoint. Will be ignored if\ncertificatesIds are provided",
                  "type": "string"
                },
                "managementEndpoints": {
                  "description": "ManagementEndpoints: The cluster management endpoint.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "maxPartitionResolutionRetries": {
                  "description": "MaxPartitionResolutionRetries: Maximum number of retries while attempting resolve the partition.",
                  "type": "integer"
                },
                "serverCertificateThumbprints": {
                  "description": "ServerCertificateThumbprints: Thumbprints of certificates cluster management service uses for tls communication",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "serverX509Names": {
                  "description": "ServerX509Names: Server X509 Certificate Names Collection",
                  "items": {
                    "description": "Properties of server X509Names.",
                    "properties": {
                      "issuerCertificateThumbprint": {
                        "description": "IssuerCertificateThumbprint: Thumbprint for the Issuer of the Certificate.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name: Common Name of the Certificate.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "managementEndpoints"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "protocol": {
          "description": "Protocol: Backend communication protocol.",
          "enum": [
            "http",
            "soap"
          ],
          "type": "string"
        },
        "proxy": {
          "description": "Proxy: Backend gateway Contract Properties",
          "properties": {
            "password": {
              "description": "Password: Password to connect to the WebProxy Server",
              "properties": {
                "key": {
                  "description": "Key is the key in the Kubernetes secret being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of the Kubernetes secret being referenced.\nThe secret must be in the same namespace as the resource",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "url": {
              "description": "Url: WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all\nfragments and query strings.",
              "maxLength": 2000,
              "minLength": 1,
              "type": "string"
            },
            "username": {
              "description": "Username: Username to connect to the WebProxy server",
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "resourceReference": {
          "description": "ResourceReference: Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps,\nFunction Apps or API Apps.",
          "properties": {
            "armId": {
              "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "group": {
              "description": "Group is the Kubernetes group of the resource.",
              "type": "string"
            },
            "kind": {
              "description": "Kind is the Kubernetes kind of the resource.",
              "type": "string"
            },
            "name": {
              "description": "Name is the Kubernetes name of the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "title": {
          "description": "Title: Backend Title.",
          "maxLength": 300,
          "minLength": 1,
          "type": "string"
        },
        "tls": {
          "description": "Tls: Backend TLS Properties",
          "properties": {
            "validateCertificateChain": {
              "description": "ValidateCertificateChain: Flag indicating whether SSL certificate chain validation should be done when using self-signed\ncertificates for this backend host.",
              "type": "boolean"
            },
            "validateCertificateName": {
              "description": "ValidateCertificateName: Flag indicating whether SSL certificate name validation should be done when using self-signed\ncertificates for this backend host.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "type": {
          "description": "Type: Type of the backend. A backend can be either Single or Pool.",
          "enum": [
            "Pool",
            "Single"
          ],
          "type": "string"
        },
        "url": {
          "description": "Url: Runtime Url of the Backend.",
          "maxLength": 2000,
          "minLength": 1,
          "type": "string"
        },
        "additionalProperties": false
      },
      "required": [
        "owner",
        "protocol",
        "url"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "properties": {
        "circuitBreaker": {
          "description": "CircuitBreaker: Backend Circuit Breaker Configuration",
          "properties": {
            "rules": {
              "description": "Rules: The rules for tripping the backend.",
              "items": {
                "description": "Rule configuration to trip the backend.",
                "properties": {
                  "failureCondition": {
                    "description": "FailureCondition: The conditions for tripping the circuit breaker.",
                    "properties": {
                      "count": {
                        "description": "Count: The threshold for opening the circuit.",
                        "type": "integer"
                      },
                      "errorReasons": {
                        "description": "ErrorReasons: The error reasons which are considered as failure.",
                        "items": {
                          "maxLength": 200,
                          "type": "string"
                        },
                        "maxItems": 10,
                        "type": "array"
                      },
                      "interval": {
                        "description": "Interval: The interval during which the failures are counted.",
                        "type": "string"
                      },
                      "percentage": {
                        "description": "Percentage: The threshold for opening the circuit.",
                        "type": "integer"
                      },
                      "statusCodeRanges": {
                        "description": "StatusCodeRanges: The status code ranges which are considered as failure.",
                        "items": {
                          "description": "The failure http status code range",
                          "properties": {
                            "max": {
                              "description": "Max: The maximum http status code.",
                              "maximum": 599,
                              "minimum": 200,
                              "type": "integer"
                            },
                            "min": {
                              "description": "Min: The minimum http status code.",
                              "maximum": 599,
                              "minimum": 200,
                              "type": "integer"
                            }
                          },
                          "type": "object",
                          "additionalProperties": false
                        },
                        "maxItems": 10,
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "Name: The rule name.",
                    "type": "string"
                  },
                  "tripDuration": {
                    "description": "TripDuration: The duration for which the circuit will be tripped.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "credentials": {
          "description": "Credentials: Backend Credentials Contract Properties",
          "properties": {
            "authorization": {
              "description": "Authorization: Authorization header authentication",
              "properties": {
                "parameter": {
                  "description": "Parameter: Authentication Parameter value.",
                  "type": "string"
                },
                "scheme": {
                  "description": "Scheme: Authentication Scheme name.",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "certificate": {
              "description": "Certificate: List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "certificateIds": {
              "description": "CertificateIds: List of Client Certificate Ids.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "header": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "description": "Header: Header Parameter description.",
              "type": "object"
            },
            "query": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "description": "Query: Query Parameter description.",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "description": {
          "description": "Description: Backend Description.",
          "type": "string"
        },
        "id": {
          "description": "Id: Fully qualified resource ID for the resource. Ex -\n/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "type": "string"
        },
        "name": {
          "description": "Name: The name of the resource",
          "type": "string"
        },
        "pool": {
          "description": "Pool: Backend pool information",
          "properties": {
            "services": {
              "description": "Services: The list of backend entities belonging to a pool.",
              "items": {
                "description": "Backend pool service information",
                "properties": {
                  "id": {
                    "description": "Id: The unique ARM id of the backend entity. The ARM id should refer to an already existing backend entity.",
                    "type": "string"
                  }
                },
                "required": [
                  "id"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "properties": {
          "description": "Properties: Backend Properties contract",
          "properties": {
            "serviceFabricCluster": {
              "description": "ServiceFabricCluster: Backend Service Fabric Cluster Properties",
              "properties": {
                "clientCertificateId": {
                  "description": "ClientCertificateId: The client certificate id for the management endpoint.",
                  "type": "string"
                },
                "clientCertificatethumbprint": {
                  "description": "ClientCertificatethumbprint: The client certificate thumbprint for the management endpoint. Will be ignored if\ncertificatesIds are provided",
                  "type": "string"
                },
                "managementEndpoints": {
                  "description": "ManagementEndpoints: The cluster management endpoint.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "maxPartitionResolutionRetries": {
                  "description": "MaxPartitionResolutionRetries: Maximum number of retries while attempting resolve the partition.",
                  "type": "integer"
                },
                "serverCertificateThumbprints": {
                  "description": "ServerCertificateThumbprints: Thumbprints of certificates cluster management service uses for tls communication",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "serverX509Names": {
                  "description": "ServerX509Names: Server X509 Certificate Names Collection",
                  "items": {
                    "description": "Properties of server X509Names.",
                    "properties": {
                      "issuerCertificateThumbprint": {
                        "description": "IssuerCertificateThumbprint: Thumbprint for the Issuer of the Certificate.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name: Common Name of the Certificate.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "properties_type": {
          "description": "PropertiesType: Type of the backend. A backend can be either Single or Pool.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol: Backend communication protocol.",
          "type": "string"
        },
        "proxy": {
          "description": "Proxy: Backend gateway Contract Properties",
          "properties": {
            "url": {
              "description": "Url: WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all\nfragments and query strings.",
              "type": "string"
            },
            "username": {
              "description": "Username: Username to connect to the WebProxy server",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "resourceId": {
          "description": "ResourceId: Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps,\nFunction Apps or API Apps.",
          "type": "string"
        },
        "title": {
          "description": "Title: Backend Title.",
          "type": "string"
        },
        "tls": {
          "description": "Tls: Backend TLS Properties",
          "properties": {
            "validateCertificateChain": {
              "description": "ValidateCertificateChain: Flag indicating whether SSL certificate chain validation should be done when using self-signed\ncertificates for this backend host.",
              "type": "boolean"
            },
            "validateCertificateName": {
              "description": "ValidateCertificateName: Flag indicating whether SSL certificate name validation should be done when using self-signed\ncertificates for this backend host.",
              "type": "boolean"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "type": {
          "description": "Type: The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "type": "string"
        },
        "url": {
          "description": "Url: Runtime Url of the Backend.",
          "type": "string"
        },
        "additionalProperties": false
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
