{
  "description": "Generator information:\n- Generated from: /dataprotection/resource-manager/Microsoft.DataProtection/stable/2023-11-01/dataprotection.json\n- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "properties": {
        "azureName": {
          "description": "AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it\ndoesn't have to be.",
          "type": "string"
        },
        "identity": {
          "description": "Identity: Input Managed Identity Details",
          "properties": {
            "type": {
              "description": "Type: The identityType which can be either SystemAssigned, UserAssigned, 'SystemAssigned,UserAssigned' or None",
              "type": "string"
            },
            "userAssignedIdentities": {
              "description": "UserAssignedIdentities: Gets or sets the user assigned identities.",
              "items": {
                "description": "Information about the user assigned identity for the resource",
                "properties": {
                  "reference": {
                    "description": "ResourceReference represents a resource reference, either to a Kubernetes resource or directly to an Azure resource via ARMID",
                    "properties": {
                      "armId": {
                        "description": "ARMID is a string of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.\nThe /resourcegroups/{resourceGroupName} bit is optional as some resources are scoped at the subscription level\nARMID is mutually exclusive with Group, Kind, Namespace and Name.",
                        "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
                        "type": "string"
                      },
                      "group": {
                        "description": "Group is the Kubernetes group of the resource.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Kind is the Kubernetes kind of the resource.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name is the Kubernetes name of the resource.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "location": {
          "description": "Location: Resource location.",
          "type": "string"
        },
        "operatorSpec": {
          "description": "OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not\npassed directly to Azure",
          "properties": {
            "configMapExpressions": {
              "description": "ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            },
            "configMaps": {
              "description": "ConfigMaps: configures where to place operator written ConfigMaps.",
              "properties": {
                "principalId": {
                  "description": "PrincipalId: indicates where the PrincipalId config map should be placed. If omitted, no config map will be created.",
                  "properties": {
                    "key": {
                      "description": "Key is the key in the ConfigMap being referenced",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name is the name of the Kubernetes ConfigMap to write to.\nThe ConfigMap will be created in the same namespace as the resource.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "secretExpressions": {
              "description": "SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).",
              "items": {
                "description": "DestinationExpression is a CEL expression and a destination to store the result in. The destination may\nbe a secret or a configmap. The value of the expression is stored at the specified location in\nthe destination.",
                "properties": {
                  "key": {
                    "description": "Key is the key in the ConfigMap or Secret being written to. If the CEL expression in Value returns a string\nthis is required to identify what key to write to. If the CEL expression in Value returns a map[string]string\nKey must not be set, instead the keys written will be determined dynamically based on the keys of the resulting\nmap[string]string.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the Kubernetes configmap or secret to write to.\nThe configmap or secret will be created in the same namespace as the resource.",
                    "type": "string"
                  },
                  "value": {
                    "description": "Value is a CEL expression. The CEL expression may return a string or a map[string]string. For more information\non CEL in ASO see https://azure.github.io/azure-service-operator/guide/expressions/",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "owner": {
          "description": "Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also\ncontrols the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a\nreference to a resources.azure.com/ResourceGroup resource",
          "properties": {
            "armId": {
              "pattern": "(?i)(^(/subscriptions/([^/]+)(/resourcegroups/([^/]+))?)?/providers/([^/]+)/([^/]+/[^/]+)(/([^/]+/[^/]+))*$|^/subscriptions/([^/]+)(/resourcegroups/([^/]+))?$)",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the Kubernetes resource to reference.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "properties": {
          "description": "Properties: BackupVaultResource properties",
          "properties": {
            "featureSettings": {
              "description": "FeatureSettings: Feature Settings",
              "properties": {
                "crossRegionRestoreSettings": {
                  "properties": {
                    "state": {
                      "description": "State: CrossRegionRestore state",
                      "enum": [
                        "Disabled",
                        "Enabled"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "crossSubscriptionRestoreSettings": {
                  "description": "CrossSubscriptionRestoreSettings: CrossSubscriptionRestore Settings",
                  "properties": {
                    "state": {
                      "description": "State: CrossSubscriptionRestore state",
                      "enum": [
                        "Disabled",
                        "Enabled",
                        "PermanentlyDisabled"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "monitoringSettings": {
              "description": "MonitoringSettings: Monitoring Settings",
              "properties": {
                "azureMonitorAlertSettings": {
                  "description": "AzureMonitorAlertSettings: Settings for Azure Monitor based alerts",
                  "properties": {
                    "alertsForAllJobFailures": {
                      "enum": [
                        "Disabled",
                        "Enabled"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "replicatedRegions": {
              "description": "ReplicatedRegions: List of replicated regions for Backup Vault",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "securitySettings": {
              "description": "SecuritySettings: Security Settings",
              "properties": {
                "immutabilitySettings": {
                  "description": "ImmutabilitySettings: Immutability Settings at vault level",
                  "properties": {
                    "state": {
                      "description": "State: Immutability state",
                      "enum": [
                        "Disabled",
                        "Locked",
                        "Unlocked"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "softDeleteSettings": {
                  "description": "SoftDeleteSettings: Soft delete related settings",
                  "properties": {
                    "retentionDurationInDays": {
                      "description": "RetentionDurationInDays: Soft delete retention duration",
                      "type": "number"
                    },
                    "state": {
                      "description": "State: State of soft delete",
                      "enum": [
                        "AlwaysOn",
                        "Off",
                        "On"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "storageSettings": {
              "description": "StorageSettings: Storage Settings",
              "items": {
                "description": "Storage setting",
                "properties": {
                  "datastoreType": {
                    "description": "DatastoreType: Gets or sets the type of the datastore.",
                    "enum": [
                      "ArchiveStore",
                      "OperationalStore",
                      "VaultStore"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "Type: Gets or sets the type.",
                    "enum": [
                      "GeoRedundant",
                      "LocallyRedundant",
                      "ZoneRedundant"
                    ],
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "required": [
            "storageSettings"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "additionalProperties": false
      },
      "required": [
        "owner",
        "properties"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "Backup Vault Resource",
      "properties": {
        "conditions": {
          "description": "Conditions: The observed state of the resource",
          "items": {
            "description": "Condition defines an extension to status (an observation) of a resource",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable message indicating details about the transition. This field may be empty.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the .metadata.generation that the condition was set based upon. For instance, if\n.metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason for the condition's last transition.\nReasons are upper CamelCase (PascalCase) with no spaces. A reason is always provided, this field will not be empty.",
                "type": "string"
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition.\nFor conditions which have positive polarity (Status == True is their normal/healthy state), this will be omitted when Status == True\nFor conditions which have negative polarity (Status == False is their normal/healthy state), this will be omitted when Status == False.\nThis is omitted in all cases when Status == Unknown",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, or Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition.",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "eTag": {
          "description": "ETag: Optional ETag.",
          "type": "string"
        },
        "id": {
          "description": "Id: Resource Id represents the complete path to the resource.",
          "type": "string"
        },
        "identity": {
          "description": "Identity: Input Managed Identity Details",
          "properties": {
            "principalId": {
              "description": "PrincipalId: The object ID of the service principal object for the managed identity that is used to grant role-based\naccess to an Azure resource.",
              "type": "string"
            },
            "tenantId": {
              "description": "TenantId: A Globally Unique Identifier (GUID) that represents the Azure AD tenant where the resource is now a member.",
              "type": "string"
            },
            "type": {
              "description": "Type: The identityType which can be either SystemAssigned, UserAssigned, 'SystemAssigned,UserAssigned' or None",
              "type": "string"
            },
            "userAssignedIdentities": {
              "additionalProperties": {
                "description": "User assigned identity properties",
                "properties": {
                  "clientId": {
                    "description": "ClientId: The client ID of the assigned identity.",
                    "type": "string"
                  },
                  "principalId": {
                    "description": "PrincipalId: The principal ID of the assigned identity.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "description": "UserAssignedIdentities: Gets or sets the user assigned identities.",
              "type": "object"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "location": {
          "description": "Location: Resource location.",
          "type": "string"
        },
        "name": {
          "description": "Name: Resource name associated with the resource.",
          "type": "string"
        },
        "properties": {
          "description": "Properties: BackupVaultResource properties",
          "properties": {
            "featureSettings": {
              "description": "FeatureSettings: Feature Settings",
              "properties": {
                "crossRegionRestoreSettings": {
                  "properties": {
                    "state": {
                      "description": "State: CrossRegionRestore state",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "crossSubscriptionRestoreSettings": {
                  "description": "CrossSubscriptionRestoreSettings: CrossSubscriptionRestore Settings",
                  "properties": {
                    "state": {
                      "description": "State: CrossSubscriptionRestore state",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "isVaultProtectedByResourceGuard": {
              "description": "IsVaultProtectedByResourceGuard: Is vault protected by resource guard",
              "type": "boolean"
            },
            "monitoringSettings": {
              "description": "MonitoringSettings: Monitoring Settings",
              "properties": {
                "azureMonitorAlertSettings": {
                  "description": "AzureMonitorAlertSettings: Settings for Azure Monitor based alerts",
                  "properties": {
                    "alertsForAllJobFailures": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "provisioningState": {
              "description": "ProvisioningState: Provisioning state of the BackupVault resource",
              "type": "string"
            },
            "replicatedRegions": {
              "description": "ReplicatedRegions: List of replicated regions for Backup Vault",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "resourceMoveDetails": {
              "description": "ResourceMoveDetails: Resource move details for backup vault",
              "properties": {
                "completionTimeUtc": {
                  "description": "CompletionTimeUtc: Completion time in UTC of latest ResourceMove operation attempted. ISO 8601 format.",
                  "type": "string"
                },
                "operationId": {
                  "description": "OperationId: CorrelationId of latest ResourceMove operation attempted",
                  "type": "string"
                },
                "sourceResourcePath": {
                  "description": "SourceResourcePath: ARM resource path of source resource",
                  "type": "string"
                },
                "startTimeUtc": {
                  "description": "StartTimeUtc: Start time in UTC of latest ResourceMove operation attempted. ISO 8601 format.",
                  "type": "string"
                },
                "targetResourcePath": {
                  "description": "TargetResourcePath: ARM resource path of target resource used in latest ResourceMove operation",
                  "type": "string"
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "resourceMoveState": {
              "description": "ResourceMoveState: Resource move state for backup vault",
              "type": "string"
            },
            "secureScore": {
              "description": "SecureScore: Secure Score of Backup Vault",
              "type": "string"
            },
            "securitySettings": {
              "description": "SecuritySettings: Security Settings",
              "properties": {
                "immutabilitySettings": {
                  "description": "ImmutabilitySettings: Immutability Settings at vault level",
                  "properties": {
                    "state": {
                      "description": "State: Immutability state",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                },
                "softDeleteSettings": {
                  "description": "SoftDeleteSettings: Soft delete related settings",
                  "properties": {
                    "retentionDurationInDays": {
                      "description": "RetentionDurationInDays: Soft delete retention duration",
                      "type": "number"
                    },
                    "state": {
                      "description": "State: State of soft delete",
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "storageSettings": {
              "description": "StorageSettings: Storage Settings",
              "items": {
                "description": "Storage setting",
                "properties": {
                  "datastoreType": {
                    "description": "DatastoreType: Gets or sets the type of the datastore.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type: Gets or sets the type.",
                    "type": "string"
                  }
                },
                "type": "object",
                "additionalProperties": false
              },
              "type": "array"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "systemData": {
          "description": "SystemData: Metadata pertaining to creation and last modification of the resource.",
          "properties": {
            "createdAt": {
              "description": "CreatedAt: The timestamp of resource creation (UTC).",
              "type": "string"
            },
            "createdBy": {
              "description": "CreatedBy: The identity that created the resource.",
              "type": "string"
            },
            "createdByType": {
              "description": "CreatedByType: The type of identity that created the resource.",
              "type": "string"
            },
            "lastModifiedAt": {
              "description": "LastModifiedAt: The timestamp of resource last modification (UTC)",
              "type": "string"
            },
            "lastModifiedBy": {
              "description": "LastModifiedBy: The identity that last modified the resource.",
              "type": "string"
            },
            "lastModifiedByType": {
              "description": "LastModifiedByType: The type of identity that last modified the resource.",
              "type": "string"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags: Resource tags.",
          "type": "object"
        },
        "type": {
          "description": "Type: Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...",
          "type": "string"
        },
        "additionalProperties": false
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "type": "object"
}
